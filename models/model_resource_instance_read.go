/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"time"
)

// ResourceInstanceRead struct for ResourceInstanceRead
type ResourceInstanceRead struct {
	// A unique identifier by which Permit will identify the resource instance for permission checks. You will later pass this identifier to the `permit.check()` API. A key can be anything: for example the resource db id, a url slug, a UUID or anything else as long as it's unique on your end. The resource instance key must be url-friendly.
	Key string `json:"key"`
	// the *key* of the tenant that this resource belongs to, used to enforce tenant boundaries in multi-tenant apps.
	Tenant *string `json:"tenant,omitempty"`
	// the *key* of the resource (type) of this resource instance. For example: if this resource instance is the annual budget document, the key of the resource might be `document`.
	Resource string `json:"resource"`
	// Unique id of the resource instance
	Id string `json:"id"`
	// Unique id of the organization that the resource instance belongs to.
	OrganizationId string `json:"organization_id"`
	// Unique id of the project that the resource instance belongs to.
	ProjectId string `json:"project_id"`
	// Unique id of the environment that the resource instance belongs to.
	EnvironmentId string `json:"environment_id"`
	// Date and time when the resource instance was created (ISO_8601 format).
	CreatedAt time.Time `json:"created_at"`
	// Date and time when the resource instance was last updated/modified (ISO_8601 format).
	UpdatedAt time.Time `json:"updated_at"`
	// the id of the resource (type) of this resource instance.
	ResourceId string `json:"resource_id"`
	// the id of the tenant of this resource instance.
	TenantId *string `json:"tenant_id,omitempty"`
	// Arbitraty resource attributes that will be used to enforce attribute-based access control policies.
	Attributes map[string]interface{} `json:"attributes,omitempty"`
}

// NewResourceInstanceRead instantiates a new ResourceInstanceRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceInstanceRead(key string, resource string, id string, organizationId string, projectId string, environmentId string, createdAt time.Time, updatedAt time.Time, resourceId string) *ResourceInstanceRead {
	this := ResourceInstanceRead{}
	this.Key = key
	this.Resource = resource
	this.Id = id
	this.OrganizationId = organizationId
	this.ProjectId = projectId
	this.EnvironmentId = environmentId
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.ResourceId = resourceId
	return &this
}

// NewResourceInstanceReadWithDefaults instantiates a new ResourceInstanceRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceInstanceReadWithDefaults() *ResourceInstanceRead {
	this := ResourceInstanceRead{}
	return &this
}

// GetKey returns the Key field value
func (o *ResourceInstanceRead) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ResourceInstanceRead) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ResourceInstanceRead) SetKey(v string) {
	o.Key = v
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *ResourceInstanceRead) GetTenant() string {
	if o == nil || IsNil(o.Tenant) {
		var ret string
		return ret
	}
	return *o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceInstanceRead) GetTenantOk() (*string, bool) {
	if o == nil || IsNil(o.Tenant) {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *ResourceInstanceRead) HasTenant() bool {
	if o != nil && !IsNil(o.Tenant) {
		return true
	}

	return false
}

// SetTenant gets a reference to the given string and assigns it to the Tenant field.
func (o *ResourceInstanceRead) SetTenant(v string) {
	o.Tenant = &v
}

// GetResource returns the Resource field value
func (o *ResourceInstanceRead) GetResource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value
// and a boolean to check if the value has been set.
func (o *ResourceInstanceRead) GetResourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resource, true
}

// SetResource sets field value
func (o *ResourceInstanceRead) SetResource(v string) {
	o.Resource = v
}

// GetId returns the Id field value
func (o *ResourceInstanceRead) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ResourceInstanceRead) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ResourceInstanceRead) SetId(v string) {
	o.Id = v
}

// GetOrganizationId returns the OrganizationId field value
func (o *ResourceInstanceRead) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *ResourceInstanceRead) GetOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *ResourceInstanceRead) SetOrganizationId(v string) {
	o.OrganizationId = v
}

// GetProjectId returns the ProjectId field value
func (o *ResourceInstanceRead) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *ResourceInstanceRead) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *ResourceInstanceRead) SetProjectId(v string) {
	o.ProjectId = v
}

// GetEnvironmentId returns the EnvironmentId field value
func (o *ResourceInstanceRead) GetEnvironmentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value
// and a boolean to check if the value has been set.
func (o *ResourceInstanceRead) GetEnvironmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentId, true
}

// SetEnvironmentId sets field value
func (o *ResourceInstanceRead) SetEnvironmentId(v string) {
	o.EnvironmentId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ResourceInstanceRead) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ResourceInstanceRead) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ResourceInstanceRead) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ResourceInstanceRead) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ResourceInstanceRead) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ResourceInstanceRead) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetResourceId returns the ResourceId field value
func (o *ResourceInstanceRead) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *ResourceInstanceRead) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *ResourceInstanceRead) SetResourceId(v string) {
	o.ResourceId = v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *ResourceInstanceRead) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceInstanceRead) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *ResourceInstanceRead) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *ResourceInstanceRead) SetTenantId(v string) {
	o.TenantId = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *ResourceInstanceRead) GetAttributes() map[string]interface{} {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceInstanceRead) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Attributes) {
		return map[string]interface{}{}, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *ResourceInstanceRead) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *ResourceInstanceRead) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

func (o ResourceInstanceRead) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Tenant) {
		toSerialize["tenant"] = o.Tenant
	}
	if true {
		toSerialize["resource"] = o.Resource
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if true {
		toSerialize["project_id"] = o.ProjectId
	}
	if true {
		toSerialize["environment_id"] = o.EnvironmentId
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if true {
		toSerialize["resource_id"] = o.ResourceId
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenant_id"] = o.TenantId
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	return json.Marshal(toSerialize)
}

type NullableResourceInstanceRead struct {
	value *ResourceInstanceRead
	isSet bool
}

func (v NullableResourceInstanceRead) Get() *ResourceInstanceRead {
	return v.value
}

func (v *NullableResourceInstanceRead) Set(val *ResourceInstanceRead) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceInstanceRead) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceInstanceRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceInstanceRead(val *ResourceInstanceRead) *NullableResourceInstanceRead {
	return &NullableResourceInstanceRead{value: val, isSet: true}
}

func (v NullableResourceInstanceRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceInstanceRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
