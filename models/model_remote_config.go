/*
Permit.io API

 Authorization as a service 

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// RemoteConfig struct for RemoteConfig
type RemoteConfig struct {
	OpalCommon map[string]interface{} `json:"opal_common,omitempty"`
	OpalClient OPALClient             `json:"opal_client"`
	Pdp        *Pdp                   `json:"pdp,omitempty"`
	Context    PDPContext             `json:"context"`
}

// NewRemoteConfig instantiates a new RemoteConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteConfig(opalClient OPALClient, context PDPContext) *RemoteConfig {
	this := RemoteConfig{}
	this.OpalClient = opalClient
	var pdp Pdp = {}
	this.Pdp = &pdp
	this.Context = context
	return &this
}

// NewRemoteConfigWithDefaults instantiates a new RemoteConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteConfigWithDefaults() *RemoteConfig {
	this := RemoteConfig{}
	var pdp Pdp = {}
	this.Pdp = &pdp
	return &this
}

// GetOpalCommon returns the OpalCommon field value if set, zero value otherwise.
func (o *RemoteConfig) GetOpalCommon() map[string]interface{} {
	if o == nil || IsNil(o.OpalCommon) {
		var ret map[string]interface{}
		return ret
	}
	return o.OpalCommon
}

// GetOpalCommonOk returns a tuple with the OpalCommon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteConfig) GetOpalCommonOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.OpalCommon) {
    return map[string]interface{}{}, false
	}
	return o.OpalCommon, true
}

// HasOpalCommon returns a boolean if a field has been set.
func (o *RemoteConfig) HasOpalCommon() bool {
	if o != nil && !IsNil(o.OpalCommon) {
		return true
	}

	return false
}

// SetOpalCommon gets a reference to the given map[string]interface{} and assigns it to the OpalCommon field.
func (o *RemoteConfig) SetOpalCommon(v map[string]interface{}) {
	o.OpalCommon = v
}

// GetOpalClient returns the OpalClient field value
func (o *RemoteConfig) GetOpalClient() OPALClient {
	if o == nil {
		var ret OPALClient
		return ret
	}

	return o.OpalClient
}

// GetOpalClientOk returns a tuple with the OpalClient field value
// and a boolean to check if the value has been set.
func (o *RemoteConfig) GetOpalClientOk() (*OPALClient, bool) {
	if o == nil {
    return nil, false
	}
	return &o.OpalClient, true
}

// SetOpalClient sets field value
func (o *RemoteConfig) SetOpalClient(v OPALClient) {
	o.OpalClient = v
}

// GetPdp returns the Pdp field value if set, zero value otherwise.
func (o *RemoteConfig) GetPdp() Pdp {
	if o == nil || IsNil(o.Pdp) {
		var ret Pdp
		return ret
	}
	return *o.Pdp
}

// GetPdpOk returns a tuple with the Pdp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteConfig) GetPdpOk() (*Pdp, bool) {
	if o == nil || IsNil(o.Pdp) {
    return nil, false
	}
	return o.Pdp, true
}

// HasPdp returns a boolean if a field has been set.
func (o *RemoteConfig) HasPdp() bool {
	if o != nil && !IsNil(o.Pdp) {
		return true
	}

	return false
}

// SetPdp gets a reference to the given Pdp and assigns it to the Pdp field.
func (o *RemoteConfig) SetPdp(v Pdp) {
	o.Pdp = &v
}

// GetContext returns the Context field value
func (o *RemoteConfig) GetContext() PDPContext {
	if o == nil {
		var ret PDPContext
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *RemoteConfig) GetContextOk() (*PDPContext, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *RemoteConfig) SetContext(v PDPContext) {
	o.Context = v
}

func (o RemoteConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OpalCommon) {
		toSerialize["opal_common"] = o.OpalCommon
	}
	if true {
		toSerialize["opal_client"] = o.OpalClient
	}
	if !IsNil(o.Pdp) {
		toSerialize["pdp"] = o.Pdp
	}
	if true {
		toSerialize["context"] = o.Context
	}
	return json.Marshal(toSerialize)
}

type NullableRemoteConfig struct {
	value *RemoteConfig
	isSet bool
}

func (v NullableRemoteConfig) Get() *RemoteConfig {
	return v.value
}

func (v *NullableRemoteConfig) Set(val *RemoteConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteConfig(val *RemoteConfig) *NullableRemoteConfig {
	return &NullableRemoteConfig{value: val, isSet: true}
}

func (v NullableRemoteConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


