/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"time"
)

// OPADecisionLog struct for OPADecisionLog
type OPADecisionLog struct {
	DecisionId string                 `json:"decision_id"`
	Labels     Labels                 `json:"labels"`
	RunId      *string                `json:"run_id,omitempty"`
	Timestamp  time.Time              `json:"timestamp"`
	Path       *string                `json:"path,omitempty"`
	Input      map[string]interface{} `json:"input,omitempty"`
	Result     map[string]interface{} `json:"result,omitempty"`
}

// NewOPADecisionLog instantiates a new OPADecisionLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOPADecisionLog(decisionId string, labels Labels, timestamp time.Time) *OPADecisionLog {
	this := OPADecisionLog{}
	this.DecisionId = decisionId
	this.Labels = labels
	this.Timestamp = timestamp
	return &this
}

// NewOPADecisionLogWithDefaults instantiates a new OPADecisionLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOPADecisionLogWithDefaults() *OPADecisionLog {
	this := OPADecisionLog{}
	return &this
}

// GetDecisionId returns the DecisionId field value
func (o *OPADecisionLog) GetDecisionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DecisionId
}

// GetDecisionIdOk returns a tuple with the DecisionId field value
// and a boolean to check if the value has been set.
func (o *OPADecisionLog) GetDecisionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DecisionId, true
}

// SetDecisionId sets field value
func (o *OPADecisionLog) SetDecisionId(v string) {
	o.DecisionId = v
}

// GetLabels returns the Labels field value
func (o *OPADecisionLog) GetLabels() Labels {
	if o == nil {
		var ret Labels
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *OPADecisionLog) GetLabelsOk() (*Labels, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Labels, true
}

// SetLabels sets field value
func (o *OPADecisionLog) SetLabels(v Labels) {
	o.Labels = v
}

// GetRunId returns the RunId field value if set, zero value otherwise.
func (o *OPADecisionLog) GetRunId() string {
	if o == nil || IsNil(o.RunId) {
		var ret string
		return ret
	}
	return *o.RunId
}

// GetRunIdOk returns a tuple with the RunId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OPADecisionLog) GetRunIdOk() (*string, bool) {
	if o == nil || IsNil(o.RunId) {
		return nil, false
	}
	return o.RunId, true
}

// HasRunId returns a boolean if a field has been set.
func (o *OPADecisionLog) HasRunId() bool {
	if o != nil && !IsNil(o.RunId) {
		return true
	}

	return false
}

// SetRunId gets a reference to the given string and assigns it to the RunId field.
func (o *OPADecisionLog) SetRunId(v string) {
	o.RunId = &v
}

// GetTimestamp returns the Timestamp field value
func (o *OPADecisionLog) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *OPADecisionLog) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *OPADecisionLog) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *OPADecisionLog) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OPADecisionLog) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *OPADecisionLog) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *OPADecisionLog) SetPath(v string) {
	o.Path = &v
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *OPADecisionLog) GetInput() map[string]interface{} {
	if o == nil || IsNil(o.Input) {
		var ret map[string]interface{}
		return ret
	}
	return o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OPADecisionLog) GetInputOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Input) {
		return map[string]interface{}{}, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *OPADecisionLog) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given map[string]interface{} and assigns it to the Input field.
func (o *OPADecisionLog) SetInput(v map[string]interface{}) {
	o.Input = v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *OPADecisionLog) GetResult() map[string]interface{} {
	if o == nil || IsNil(o.Result) {
		var ret map[string]interface{}
		return ret
	}
	return o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OPADecisionLog) GetResultOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Result) {
		return map[string]interface{}{}, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *OPADecisionLog) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given map[string]interface{} and assigns it to the Result field.
func (o *OPADecisionLog) SetResult(v map[string]interface{}) {
	o.Result = v
}

func (o OPADecisionLog) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["decision_id"] = o.DecisionId
	}
	if true {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.RunId) {
		toSerialize["run_id"] = o.RunId
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	return json.Marshal(toSerialize)
}

type NullableOPADecisionLog struct {
	value *OPADecisionLog
	isSet bool
}

func (v NullableOPADecisionLog) Get() *OPADecisionLog {
	return v.value
}

func (v *NullableOPADecisionLog) Set(val *OPADecisionLog) {
	v.value = val
	v.isSet = true
}

func (v NullableOPADecisionLog) IsSet() bool {
	return v.isSet
}

func (v *NullableOPADecisionLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOPADecisionLog(val *OPADecisionLog) *NullableOPADecisionLog {
	return &NullableOPADecisionLog{value: val, isSet: true}
}

func (v NullableOPADecisionLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOPADecisionLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
