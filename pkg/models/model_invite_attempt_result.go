/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// InviteAttemptResult struct for InviteAttemptResult
type InviteAttemptResult struct {
	// the invite code was accepted
	InviteSuccessful *bool `json:"invite_successful,omitempty"`
	// if the invite failed, the reason it failed
	InviteFailedReason *string `json:"invite_failed_reason,omitempty"`
}

// NewInviteAttemptResult instantiates a new InviteAttemptResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInviteAttemptResult() *InviteAttemptResult {
	this := InviteAttemptResult{}
	var inviteSuccessful bool = false
	this.InviteSuccessful = &inviteSuccessful
	return &this
}

// NewInviteAttemptResultWithDefaults instantiates a new InviteAttemptResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInviteAttemptResultWithDefaults() *InviteAttemptResult {
	this := InviteAttemptResult{}
	var inviteSuccessful bool = false
	this.InviteSuccessful = &inviteSuccessful
	return &this
}

// GetInviteSuccessful returns the InviteSuccessful field value if set, zero value otherwise.
func (o *InviteAttemptResult) GetInviteSuccessful() bool {
	if o == nil || IsNil(o.InviteSuccessful) {
		var ret bool
		return ret
	}
	return *o.InviteSuccessful
}

// GetInviteSuccessfulOk returns a tuple with the InviteSuccessful field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InviteAttemptResult) GetInviteSuccessfulOk() (*bool, bool) {
	if o == nil || IsNil(o.InviteSuccessful) {
		return nil, false
	}
	return o.InviteSuccessful, true
}

// HasInviteSuccessful returns a boolean if a field has been set.
func (o *InviteAttemptResult) HasInviteSuccessful() bool {
	if o != nil && !IsNil(o.InviteSuccessful) {
		return true
	}

	return false
}

// SetInviteSuccessful gets a reference to the given bool and assigns it to the InviteSuccessful field.
func (o *InviteAttemptResult) SetInviteSuccessful(v bool) {
	o.InviteSuccessful = &v
}

// GetInviteFailedReason returns the InviteFailedReason field value if set, zero value otherwise.
func (o *InviteAttemptResult) GetInviteFailedReason() string {
	if o == nil || IsNil(o.InviteFailedReason) {
		var ret string
		return ret
	}
	return *o.InviteFailedReason
}

// GetInviteFailedReasonOk returns a tuple with the InviteFailedReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InviteAttemptResult) GetInviteFailedReasonOk() (*string, bool) {
	if o == nil || IsNil(o.InviteFailedReason) {
		return nil, false
	}
	return o.InviteFailedReason, true
}

// HasInviteFailedReason returns a boolean if a field has been set.
func (o *InviteAttemptResult) HasInviteFailedReason() bool {
	if o != nil && !IsNil(o.InviteFailedReason) {
		return true
	}

	return false
}

// SetInviteFailedReason gets a reference to the given string and assigns it to the InviteFailedReason field.
func (o *InviteAttemptResult) SetInviteFailedReason(v string) {
	o.InviteFailedReason = &v
}

func (o InviteAttemptResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InviteSuccessful) {
		toSerialize["invite_successful"] = o.InviteSuccessful
	}
	if !IsNil(o.InviteFailedReason) {
		toSerialize["invite_failed_reason"] = o.InviteFailedReason
	}
	return json.Marshal(toSerialize)
}

type NullableInviteAttemptResult struct {
	value *InviteAttemptResult
	isSet bool
}

func (v NullableInviteAttemptResult) Get() *InviteAttemptResult {
	return v.value
}

func (v *NullableInviteAttemptResult) Set(val *InviteAttemptResult) {
	v.value = val
	v.isSet = true
}

func (v NullableInviteAttemptResult) IsSet() bool {
	return v.isSet
}

func (v *NullableInviteAttemptResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInviteAttemptResult(val *InviteAttemptResult) *NullableInviteAttemptResult {
	return &NullableInviteAttemptResult{value: val, isSet: true}
}

func (v NullableInviteAttemptResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInviteAttemptResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
