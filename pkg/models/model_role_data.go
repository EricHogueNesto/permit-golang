/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// RoleData struct for RoleData
type RoleData struct {
	Grants *map[string][]string `json:"grants,omitempty"`
}

// NewRoleData instantiates a new RoleData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleData() *RoleData {
	this := RoleData{}
	return &this
}

// NewRoleDataWithDefaults instantiates a new RoleData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleDataWithDefaults() *RoleData {
	this := RoleData{}
	return &this
}

// GetGrants returns the Grants field value if set, zero value otherwise.
func (o *RoleData) GetGrants() map[string][]string {
	if o == nil || IsNil(o.Grants) {
		var ret map[string][]string
		return ret
	}
	return *o.Grants
}

// GetGrantsOk returns a tuple with the Grants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleData) GetGrantsOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Grants) {
		return nil, false
	}
	return o.Grants, true
}

// HasGrants returns a boolean if a field has been set.
func (o *RoleData) HasGrants() bool {
	if o != nil && !IsNil(o.Grants) {
		return true
	}

	return false
}

// SetGrants gets a reference to the given map[string][]string and assigns it to the Grants field.
func (o *RoleData) SetGrants(v map[string][]string) {
	o.Grants = &v
}

func (o RoleData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Grants) {
		toSerialize["grants"] = o.Grants
	}
	return json.Marshal(toSerialize)
}

type NullableRoleData struct {
	value *RoleData
	isSet bool
}

func (v NullableRoleData) Get() *RoleData {
	return v.value
}

func (v *NullableRoleData) Set(val *RoleData) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleData) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleData(val *RoleData) *NullableRoleData {
	return &NullableRoleData{value: val, isSet: true}
}

func (v NullableRoleData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
