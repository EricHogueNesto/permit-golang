/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"time"
)

// ProjectRead struct for ProjectRead
type ProjectRead struct {
	// A URL-friendly name of the project (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the project.
	Key string `json:"key"`
	// Optional namespace for URNs. If empty, URNs will be generated from project key.
	UrnNamespace *string `json:"urn_namespace,omitempty"`
	// Unique id of the project
	Id string `json:"id"`
	// Unique id of the organization that the project belongs to.
	OrganizationId string `json:"organization_id"`
	// Date and time when the project was created (ISO_8601 format).
	CreatedAt time.Time `json:"created_at"`
	// Date and time when the project was last updated/modified (ISO_8601 format).
	UpdatedAt time.Time `json:"updated_at"`
	// The name of the project
	Name string `json:"name"`
	// a longer description outlining the project objectives
	Description *string `json:"description,omitempty"`
	// the settings for this project
	Settings map[string]interface{} `json:"settings,omitempty"`
	// the id of the policy repo to use for this project
	ActivePolicyRepoId *string `json:"active_policy_repo_id,omitempty"`
}

// NewProjectRead instantiates a new ProjectRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectRead(key string, id string, organizationId string, createdAt time.Time, updatedAt time.Time, name string) *ProjectRead {
	this := ProjectRead{}
	this.Key = key
	this.Id = id
	this.OrganizationId = organizationId
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Name = name
	return &this
}

// NewProjectReadWithDefaults instantiates a new ProjectRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectReadWithDefaults() *ProjectRead {
	this := ProjectRead{}
	return &this
}

// GetKey returns the Key field value
func (o *ProjectRead) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ProjectRead) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ProjectRead) SetKey(v string) {
	o.Key = v
}

// GetUrnNamespace returns the UrnNamespace field value if set, zero value otherwise.
func (o *ProjectRead) GetUrnNamespace() string {
	if o == nil || IsNil(o.UrnNamespace) {
		var ret string
		return ret
	}
	return *o.UrnNamespace
}

// GetUrnNamespaceOk returns a tuple with the UrnNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectRead) GetUrnNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.UrnNamespace) {
		return nil, false
	}
	return o.UrnNamespace, true
}

// HasUrnNamespace returns a boolean if a field has been set.
func (o *ProjectRead) HasUrnNamespace() bool {
	if o != nil && !IsNil(o.UrnNamespace) {
		return true
	}

	return false
}

// SetUrnNamespace gets a reference to the given string and assigns it to the UrnNamespace field.
func (o *ProjectRead) SetUrnNamespace(v string) {
	o.UrnNamespace = &v
}

// GetId returns the Id field value
func (o *ProjectRead) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ProjectRead) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ProjectRead) SetId(v string) {
	o.Id = v
}

// GetOrganizationId returns the OrganizationId field value
func (o *ProjectRead) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *ProjectRead) GetOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *ProjectRead) SetOrganizationId(v string) {
	o.OrganizationId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ProjectRead) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ProjectRead) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ProjectRead) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ProjectRead) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ProjectRead) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ProjectRead) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetName returns the Name field value
func (o *ProjectRead) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProjectRead) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProjectRead) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProjectRead) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectRead) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProjectRead) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProjectRead) SetDescription(v string) {
	o.Description = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *ProjectRead) GetSettings() map[string]interface{} {
	if o == nil || IsNil(o.Settings) {
		var ret map[string]interface{}
		return ret
	}
	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectRead) GetSettingsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Settings) {
		return map[string]interface{}{}, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *ProjectRead) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given map[string]interface{} and assigns it to the Settings field.
func (o *ProjectRead) SetSettings(v map[string]interface{}) {
	o.Settings = v
}

// GetActivePolicyRepoId returns the ActivePolicyRepoId field value if set, zero value otherwise.
func (o *ProjectRead) GetActivePolicyRepoId() string {
	if o == nil || IsNil(o.ActivePolicyRepoId) {
		var ret string
		return ret
	}
	return *o.ActivePolicyRepoId
}

// GetActivePolicyRepoIdOk returns a tuple with the ActivePolicyRepoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectRead) GetActivePolicyRepoIdOk() (*string, bool) {
	if o == nil || IsNil(o.ActivePolicyRepoId) {
		return nil, false
	}
	return o.ActivePolicyRepoId, true
}

// HasActivePolicyRepoId returns a boolean if a field has been set.
func (o *ProjectRead) HasActivePolicyRepoId() bool {
	if o != nil && !IsNil(o.ActivePolicyRepoId) {
		return true
	}

	return false
}

// SetActivePolicyRepoId gets a reference to the given string and assigns it to the ActivePolicyRepoId field.
func (o *ProjectRead) SetActivePolicyRepoId(v string) {
	o.ActivePolicyRepoId = &v
}

func (o ProjectRead) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.UrnNamespace) {
		toSerialize["urn_namespace"] = o.UrnNamespace
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	if !IsNil(o.ActivePolicyRepoId) {
		toSerialize["active_policy_repo_id"] = o.ActivePolicyRepoId
	}
	return json.Marshal(toSerialize)
}

type NullableProjectRead struct {
	value *ProjectRead
	isSet bool
}

func (v NullableProjectRead) Get() *ProjectRead {
	return v.value
}

func (v *NullableProjectRead) Set(val *ProjectRead) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectRead) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectRead(val *ProjectRead) *NullableProjectRead {
	return &NullableProjectRead{value: val, isSet: true}
}

func (v NullableProjectRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
