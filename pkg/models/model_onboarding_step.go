/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// OnboardingStep An enumeration.
type OnboardingStep string

// List of OnboardingStep
const (
	CREATE_ORGANIZATION OnboardingStep = "create_organization"
	CREATE_PROJECT      OnboardingStep = "create_project"
	CREATE_RESOURCE     OnboardingStep = "create_resource"
	CREATE_ACTIONS      OnboardingStep = "create_actions"
	ASSIGN_PERMISSIONS  OnboardingStep = "assign_permissions"
	ASSIGN_USER_ROLES   OnboardingStep = "assign_user_roles"
	CONNECT_SDK         OnboardingStep = "connect_sdk"
	DONE                OnboardingStep = "done"
)

// All allowed values of OnboardingStep enum
var AllowedOnboardingStepEnumValues = []OnboardingStep{
	"create_organization",
	"create_project",
	"create_resource",
	"create_actions",
	"assign_permissions",
	"assign_user_roles",
	"connect_sdk",
	"done",
}

func (v *OnboardingStep) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OnboardingStep(value)
	for _, existing := range AllowedOnboardingStepEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OnboardingStep", value)
}

// NewOnboardingStepFromValue returns a pointer to a valid OnboardingStep
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOnboardingStepFromValue(v string) (*OnboardingStep, error) {
	ev := OnboardingStep(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OnboardingStep: valid values are %v", v, AllowedOnboardingStepEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OnboardingStep) IsValid() bool {
	for _, existing := range AllowedOnboardingStepEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OnboardingStep value
func (v OnboardingStep) Ptr() *OnboardingStep {
	return &v
}

type NullableOnboardingStep struct {
	value *OnboardingStep
	isSet bool
}

func (v NullableOnboardingStep) Get() *OnboardingStep {
	return v.value
}

func (v *NullableOnboardingStep) Set(val *OnboardingStep) {
	v.value = val
	v.isSet = true
}

func (v NullableOnboardingStep) IsSet() bool {
	return v.isSet
}

func (v *NullableOnboardingStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnboardingStep(val *OnboardingStep) *NullableOnboardingStep {
	return &NullableOnboardingStep{value: val, isSet: true}
}

func (v NullableOnboardingStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnboardingStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
