/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// DataSourceConfig Static list of Data Source Entries returned to client.  Answers this question for the client: from where should i get the full picture of data i need? (as opposed to incremental data updates)
type DataSourceConfig struct {
	// list of data sources and how to fetch from them
	Entries []DataSourceEntry `json:"entries"`
}

// NewDataSourceConfig instantiates a new DataSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSourceConfig(entries []DataSourceEntry) *DataSourceConfig {
	this := DataSourceConfig{}
	this.Entries = entries
	return &this
}

// NewDataSourceConfigWithDefaults instantiates a new DataSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSourceConfigWithDefaults() *DataSourceConfig {
	this := DataSourceConfig{}
	return &this
}

// GetEntries returns the Entries field value
func (o *DataSourceConfig) GetEntries() []DataSourceEntry {
	if o == nil {
		var ret []DataSourceEntry
		return ret
	}

	return o.Entries
}

// GetEntriesOk returns a tuple with the Entries field value
// and a boolean to check if the value has been set.
func (o *DataSourceConfig) GetEntriesOk() ([]DataSourceEntry, bool) {
	if o == nil {
		return nil, false
	}
	return o.Entries, true
}

// SetEntries sets field value
func (o *DataSourceConfig) SetEntries(v []DataSourceEntry) {
	o.Entries = v
}

func (o DataSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["entries"] = o.Entries
	}
	return json.Marshal(toSerialize)
}

type NullableDataSourceConfig struct {
	value *DataSourceConfig
	isSet bool
}

func (v NullableDataSourceConfig) Get() *DataSourceConfig {
	return v.value
}

func (v *NullableDataSourceConfig) Set(val *DataSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSourceConfig(val *DataSourceConfig) *NullableDataSourceConfig {
	return &NullableDataSourceConfig{value: val, isSet: true}
}

func (v NullableDataSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
