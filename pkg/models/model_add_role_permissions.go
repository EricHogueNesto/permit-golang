/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// AddRolePermissions struct for AddRolePermissions
type AddRolePermissions struct {
	// List of permissions to assign to the role. If a permission is already granted to the role it is skipped. Each permission can be either a resource action id, or `{resource_key}:{action_key}`, i.e: the \"permission name\".
	Permissions []string `json:"permissions"`
}

// NewAddRolePermissions instantiates a new AddRolePermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddRolePermissions(permissions []string) *AddRolePermissions {
	this := AddRolePermissions{}
	this.Permissions = permissions
	return &this
}

// NewAddRolePermissionsWithDefaults instantiates a new AddRolePermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddRolePermissionsWithDefaults() *AddRolePermissions {
	this := AddRolePermissions{}
	return &this
}

// GetPermissions returns the Permissions field value
func (o *AddRolePermissions) GetPermissions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *AddRolePermissions) GetPermissionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *AddRolePermissions) SetPermissions(v []string) {
	o.Permissions = v
}

func (o AddRolePermissions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["permissions"] = o.Permissions
	}
	return json.Marshal(toSerialize)
}

type NullableAddRolePermissions struct {
	value *AddRolePermissions
	isSet bool
}

func (v NullableAddRolePermissions) Get() *AddRolePermissions {
	return v.value
}

func (v *NullableAddRolePermissions) Set(val *AddRolePermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableAddRolePermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableAddRolePermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddRolePermissions(val *AddRolePermissions) *NullableAddRolePermissions {
	return &NullableAddRolePermissions{value: val, isSet: true}
}

func (v NullableAddRolePermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddRolePermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
