/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// ElementsEnvUpdate struct for ElementsEnvUpdate
type ElementsEnvUpdate struct {
	// Obj with levels as keys and role ids as values
	RolesToLevels *map[string][]string `json:"roles_to_levels,omitempty"`
}

// NewElementsEnvUpdate instantiates a new ElementsEnvUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElementsEnvUpdate() *ElementsEnvUpdate {
	this := ElementsEnvUpdate{}
	return &this
}

// NewElementsEnvUpdateWithDefaults instantiates a new ElementsEnvUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElementsEnvUpdateWithDefaults() *ElementsEnvUpdate {
	this := ElementsEnvUpdate{}
	return &this
}

// GetRolesToLevels returns the RolesToLevels field value if set, zero value otherwise.
func (o *ElementsEnvUpdate) GetRolesToLevels() map[string][]string {
	if o == nil || IsNil(o.RolesToLevels) {
		var ret map[string][]string
		return ret
	}
	return *o.RolesToLevels
}

// GetRolesToLevelsOk returns a tuple with the RolesToLevels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementsEnvUpdate) GetRolesToLevelsOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.RolesToLevels) {
		return nil, false
	}
	return o.RolesToLevels, true
}

// HasRolesToLevels returns a boolean if a field has been set.
func (o *ElementsEnvUpdate) HasRolesToLevels() bool {
	if o != nil && !IsNil(o.RolesToLevels) {
		return true
	}

	return false
}

// SetRolesToLevels gets a reference to the given map[string][]string and assigns it to the RolesToLevels field.
func (o *ElementsEnvUpdate) SetRolesToLevels(v map[string][]string) {
	o.RolesToLevels = &v
}

func (o ElementsEnvUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RolesToLevels) {
		toSerialize["roles_to_levels"] = o.RolesToLevels
	}
	return json.Marshal(toSerialize)
}

type NullableElementsEnvUpdate struct {
	value *ElementsEnvUpdate
	isSet bool
}

func (v NullableElementsEnvUpdate) Get() *ElementsEnvUpdate {
	return v.value
}

func (v *NullableElementsEnvUpdate) Set(val *ElementsEnvUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableElementsEnvUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableElementsEnvUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElementsEnvUpdate(val *ElementsEnvUpdate) *NullableElementsEnvUpdate {
	return &NullableElementsEnvUpdate{value: val, isSet: true}
}

func (v NullableElementsEnvUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElementsEnvUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
