/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PolicyRepoStatus An enumeration.
type PolicyRepoStatus string

// List of PolicyRepoStatus
const (
	INVALID PolicyRepoStatus = "invalid"
	PENDING PolicyRepoStatus = "pending"
	VALID   PolicyRepoStatus = "valid"
)

// All allowed values of PolicyRepoStatus enum
var AllowedPolicyRepoStatusEnumValues = []PolicyRepoStatus{
	"invalid",
	"pending",
	"valid",
}

func (v *PolicyRepoStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PolicyRepoStatus(value)
	for _, existing := range AllowedPolicyRepoStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PolicyRepoStatus", value)
}

// NewPolicyRepoStatusFromValue returns a pointer to a valid PolicyRepoStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicyRepoStatusFromValue(v string) (*PolicyRepoStatus, error) {
	ev := PolicyRepoStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PolicyRepoStatus: valid values are %v", v, AllowedPolicyRepoStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolicyRepoStatus) IsValid() bool {
	for _, existing := range AllowedPolicyRepoStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PolicyRepoStatus value
func (v PolicyRepoStatus) Ptr() *PolicyRepoStatus {
	return &v
}

type NullablePolicyRepoStatus struct {
	value *PolicyRepoStatus
	isSet bool
}

func (v NullablePolicyRepoStatus) Get() *PolicyRepoStatus {
	return v.value
}

func (v *NullablePolicyRepoStatus) Set(val *PolicyRepoStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyRepoStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyRepoStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyRepoStatus(val *PolicyRepoStatus) *NullablePolicyRepoStatus {
	return &NullablePolicyRepoStatus{value: val, isSet: true}
}

func (v NullablePolicyRepoStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyRepoStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
