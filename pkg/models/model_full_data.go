/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// FullData struct for FullData
type FullData struct {
	Users             map[string]UserData                       `json:"users"`
	Roles             map[string]RoleData                       `json:"roles"`
	ConditionSetRules map[string]map[string]map[string][]string `json:"condition_set_rules"`
}

// NewFullData instantiates a new FullData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFullData(users map[string]UserData, roles map[string]RoleData, conditionSetRules map[string]map[string]map[string][]string) *FullData {
	this := FullData{}
	this.Users = users
	this.Roles = roles
	this.ConditionSetRules = conditionSetRules
	return &this
}

// NewFullDataWithDefaults instantiates a new FullData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFullDataWithDefaults() *FullData {
	this := FullData{}
	return &this
}

// GetUsers returns the Users field value
func (o *FullData) GetUsers() map[string]UserData {
	if o == nil {
		var ret map[string]UserData
		return ret
	}

	return o.Users
}

// GetUsersOk returns a tuple with the Users field value
// and a boolean to check if the value has been set.
func (o *FullData) GetUsersOk() (*map[string]UserData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Users, true
}

// SetUsers sets field value
func (o *FullData) SetUsers(v map[string]UserData) {
	o.Users = v
}

// GetRoles returns the Roles field value
func (o *FullData) GetRoles() map[string]RoleData {
	if o == nil {
		var ret map[string]RoleData
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *FullData) GetRolesOk() (*map[string]RoleData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Roles, true
}

// SetRoles sets field value
func (o *FullData) SetRoles(v map[string]RoleData) {
	o.Roles = v
}

// GetConditionSetRules returns the ConditionSetRules field value
func (o *FullData) GetConditionSetRules() map[string]map[string]map[string][]string {
	if o == nil {
		var ret map[string]map[string]map[string][]string
		return ret
	}

	return o.ConditionSetRules
}

// GetConditionSetRulesOk returns a tuple with the ConditionSetRules field value
// and a boolean to check if the value has been set.
func (o *FullData) GetConditionSetRulesOk() (*map[string]map[string]map[string][]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConditionSetRules, true
}

// SetConditionSetRules sets field value
func (o *FullData) SetConditionSetRules(v map[string]map[string]map[string][]string) {
	o.ConditionSetRules = v
}

func (o FullData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["users"] = o.Users
	}
	if true {
		toSerialize["roles"] = o.Roles
	}
	if true {
		toSerialize["condition_set_rules"] = o.ConditionSetRules
	}
	return json.Marshal(toSerialize)
}

type NullableFullData struct {
	value *FullData
	isSet bool
}

func (v NullableFullData) Get() *FullData {
	return v.value
}

func (v *NullableFullData) Set(val *FullData) {
	v.value = val
	v.isSet = true
}

func (v NullableFullData) IsSet() bool {
	return v.isSet
}

func (v *NullableFullData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFullData(val *FullData) *NullableFullData {
	return &NullableFullData{value: val, isSet: true}
}

func (v NullableFullData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFullData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
