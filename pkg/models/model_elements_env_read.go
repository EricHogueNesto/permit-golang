/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// ElementsEnvRead struct for ElementsEnvRead
type ElementsEnvRead struct {
	// Obj with levels as keys and role ids as values
	RolesToLevels map[string][]PermissionLevelRoleRead `json:"roles_to_levels"`
}

// NewElementsEnvRead instantiates a new ElementsEnvRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElementsEnvRead(rolesToLevels map[string][]PermissionLevelRoleRead) *ElementsEnvRead {
	this := ElementsEnvRead{}
	this.RolesToLevels = rolesToLevels
	return &this
}

// NewElementsEnvReadWithDefaults instantiates a new ElementsEnvRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElementsEnvReadWithDefaults() *ElementsEnvRead {
	this := ElementsEnvRead{}
	return &this
}

// GetRolesToLevels returns the RolesToLevels field value
func (o *ElementsEnvRead) GetRolesToLevels() map[string][]PermissionLevelRoleRead {
	if o == nil {
		var ret map[string][]PermissionLevelRoleRead
		return ret
	}

	return o.RolesToLevels
}

// GetRolesToLevelsOk returns a tuple with the RolesToLevels field value
// and a boolean to check if the value has been set.
func (o *ElementsEnvRead) GetRolesToLevelsOk() (*map[string][]PermissionLevelRoleRead, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RolesToLevels, true
}

// SetRolesToLevels sets field value
func (o *ElementsEnvRead) SetRolesToLevels(v map[string][]PermissionLevelRoleRead) {
	o.RolesToLevels = v
}

func (o ElementsEnvRead) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["roles_to_levels"] = o.RolesToLevels
	}
	return json.Marshal(toSerialize)
}

type NullableElementsEnvRead struct {
	value *ElementsEnvRead
	isSet bool
}

func (v NullableElementsEnvRead) Get() *ElementsEnvRead {
	return v.value
}

func (v *NullableElementsEnvRead) Set(val *ElementsEnvRead) {
	v.value = val
	v.isSet = true
}

func (v NullableElementsEnvRead) IsSet() bool {
	return v.isSet
}

func (v *NullableElementsEnvRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElementsEnvRead(val *ElementsEnvRead) *NullableElementsEnvRead {
	return &NullableElementsEnvRead{value: val, isSet: true}
}

func (v NullableElementsEnvRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElementsEnvRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
