/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ElementsPermissionLevel An enumeration.
type ElementsPermissionLevel string

// List of ElementsPermissionLevel
const (
	LEVEL_1      ElementsPermissionLevel = "LEVEL_1"
	LEVEL_2      ElementsPermissionLevel = "LEVEL_2"
	LEVEL_3      ElementsPermissionLevel = "LEVEL_3"
	LEVEL_4      ElementsPermissionLevel = "LEVEL_4"
	HIDDEN       ElementsPermissionLevel = "HIDDEN"
	UNCONFIGURED ElementsPermissionLevel = "UNCONFIGURED"
)

// All allowed values of ElementsPermissionLevel enum
var AllowedElementsPermissionLevelEnumValues = []ElementsPermissionLevel{
	"LEVEL_1",
	"LEVEL_2",
	"LEVEL_3",
	"LEVEL_4",
	"HIDDEN",
	"UNCONFIGURED",
}

func (v *ElementsPermissionLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ElementsPermissionLevel(value)
	for _, existing := range AllowedElementsPermissionLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ElementsPermissionLevel", value)
}

// NewElementsPermissionLevelFromValue returns a pointer to a valid ElementsPermissionLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewElementsPermissionLevelFromValue(v string) (*ElementsPermissionLevel, error) {
	ev := ElementsPermissionLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ElementsPermissionLevel: valid values are %v", v, AllowedElementsPermissionLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ElementsPermissionLevel) IsValid() bool {
	for _, existing := range AllowedElementsPermissionLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ElementsPermissionLevel value
func (v ElementsPermissionLevel) Ptr() *ElementsPermissionLevel {
	return &v
}

type NullableElementsPermissionLevel struct {
	value *ElementsPermissionLevel
	isSet bool
}

func (v NullableElementsPermissionLevel) Get() *ElementsPermissionLevel {
	return v.value
}

func (v *NullableElementsPermissionLevel) Set(val *ElementsPermissionLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableElementsPermissionLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableElementsPermissionLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElementsPermissionLevel(val *ElementsPermissionLevel) *NullableElementsPermissionLevel {
	return &NullableElementsPermissionLevel{value: val, isSet: true}
}

func (v NullableElementsPermissionLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElementsPermissionLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
