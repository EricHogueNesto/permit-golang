/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// APIKeyOwnerType An enumeration.
type APIKeyOwnerType string

// List of APIKeyOwnerType
const (
	PDP_CONFIG APIKeyOwnerType = "pdp_config"
	MEMBER     APIKeyOwnerType = "member"
	ELEMENTS   APIKeyOwnerType = "elements"
)

// All allowed values of APIKeyOwnerType enum
var AllowedAPIKeyOwnerTypeEnumValues = []APIKeyOwnerType{
	"pdp_config",
	"member",
	"elements",
}

func (v *APIKeyOwnerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := APIKeyOwnerType(value)
	for _, existing := range AllowedAPIKeyOwnerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid APIKeyOwnerType", value)
}

// NewAPIKeyOwnerTypeFromValue returns a pointer to a valid APIKeyOwnerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAPIKeyOwnerTypeFromValue(v string) (*APIKeyOwnerType, error) {
	ev := APIKeyOwnerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for APIKeyOwnerType: valid values are %v", v, AllowedAPIKeyOwnerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v APIKeyOwnerType) IsValid() bool {
	for _, existing := range AllowedAPIKeyOwnerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to APIKeyOwnerType value
func (v APIKeyOwnerType) Ptr() *APIKeyOwnerType {
	return &v
}

type NullableAPIKeyOwnerType struct {
	value *APIKeyOwnerType
	isSet bool
}

func (v NullableAPIKeyOwnerType) Get() *APIKeyOwnerType {
	return v.value
}

func (v *NullableAPIKeyOwnerType) Set(val *APIKeyOwnerType) {
	v.value = val
	v.isSet = true
}

func (v NullableAPIKeyOwnerType) IsSet() bool {
	return v.isSet
}

func (v *NullableAPIKeyOwnerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAPIKeyOwnerType(val *APIKeyOwnerType) *NullableAPIKeyOwnerType {
	return &NullableAPIKeyOwnerType{value: val, isSet: true}
}

func (v NullableAPIKeyOwnerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAPIKeyOwnerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
