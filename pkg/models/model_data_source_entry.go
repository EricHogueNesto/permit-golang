/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// DataSourceEntry Data source configuration - where client's should retrive data from and how they should store it
type DataSourceEntry struct {
	// Url source to query for data
	Url string `json:"url"`
	// Suggested fetcher configuration (e.g. auth or method) to fetch data with
	Config map[string]interface{} `json:"config,omitempty"`
	// topics the data applies to
	Topics []string `json:"topics,omitempty"`
	// OPA data api path to store the document at
	DstPath *string `json:"dst_path,omitempty"`
	// Method used to write into OPA - PUT/PATCH
	SaveMethod *string `json:"save_method,omitempty"`
}

// NewDataSourceEntry instantiates a new DataSourceEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSourceEntry(url string) *DataSourceEntry {
	this := DataSourceEntry{}
	this.Url = url
	var dstPath string = ""
	this.DstPath = &dstPath
	var saveMethod string = "PUT"
	this.SaveMethod = &saveMethod
	return &this
}

// NewDataSourceEntryWithDefaults instantiates a new DataSourceEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSourceEntryWithDefaults() *DataSourceEntry {
	this := DataSourceEntry{}
	var dstPath string = ""
	this.DstPath = &dstPath
	var saveMethod string = "PUT"
	this.SaveMethod = &saveMethod
	return &this
}

// GetUrl returns the Url field value
func (o *DataSourceEntry) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *DataSourceEntry) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *DataSourceEntry) SetUrl(v string) {
	o.Url = v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *DataSourceEntry) GetConfig() map[string]interface{} {
	if o == nil || IsNil(o.Config) {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceEntry) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Config) {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *DataSourceEntry) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *DataSourceEntry) SetConfig(v map[string]interface{}) {
	o.Config = v
}

// GetTopics returns the Topics field value if set, zero value otherwise.
func (o *DataSourceEntry) GetTopics() []string {
	if o == nil || IsNil(o.Topics) {
		var ret []string
		return ret
	}
	return o.Topics
}

// GetTopicsOk returns a tuple with the Topics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceEntry) GetTopicsOk() ([]string, bool) {
	if o == nil || IsNil(o.Topics) {
		return nil, false
	}
	return o.Topics, true
}

// HasTopics returns a boolean if a field has been set.
func (o *DataSourceEntry) HasTopics() bool {
	if o != nil && !IsNil(o.Topics) {
		return true
	}

	return false
}

// SetTopics gets a reference to the given []string and assigns it to the Topics field.
func (o *DataSourceEntry) SetTopics(v []string) {
	o.Topics = v
}

// GetDstPath returns the DstPath field value if set, zero value otherwise.
func (o *DataSourceEntry) GetDstPath() string {
	if o == nil || IsNil(o.DstPath) {
		var ret string
		return ret
	}
	return *o.DstPath
}

// GetDstPathOk returns a tuple with the DstPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceEntry) GetDstPathOk() (*string, bool) {
	if o == nil || IsNil(o.DstPath) {
		return nil, false
	}
	return o.DstPath, true
}

// HasDstPath returns a boolean if a field has been set.
func (o *DataSourceEntry) HasDstPath() bool {
	if o != nil && !IsNil(o.DstPath) {
		return true
	}

	return false
}

// SetDstPath gets a reference to the given string and assigns it to the DstPath field.
func (o *DataSourceEntry) SetDstPath(v string) {
	o.DstPath = &v
}

// GetSaveMethod returns the SaveMethod field value if set, zero value otherwise.
func (o *DataSourceEntry) GetSaveMethod() string {
	if o == nil || IsNil(o.SaveMethod) {
		var ret string
		return ret
	}
	return *o.SaveMethod
}

// GetSaveMethodOk returns a tuple with the SaveMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSourceEntry) GetSaveMethodOk() (*string, bool) {
	if o == nil || IsNil(o.SaveMethod) {
		return nil, false
	}
	return o.SaveMethod, true
}

// HasSaveMethod returns a boolean if a field has been set.
func (o *DataSourceEntry) HasSaveMethod() bool {
	if o != nil && !IsNil(o.SaveMethod) {
		return true
	}

	return false
}

// SetSaveMethod gets a reference to the given string and assigns it to the SaveMethod field.
func (o *DataSourceEntry) SetSaveMethod(v string) {
	o.SaveMethod = &v
}

func (o DataSourceEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Topics) {
		toSerialize["topics"] = o.Topics
	}
	if !IsNil(o.DstPath) {
		toSerialize["dst_path"] = o.DstPath
	}
	if !IsNil(o.SaveMethod) {
		toSerialize["save_method"] = o.SaveMethod
	}
	return json.Marshal(toSerialize)
}

type NullableDataSourceEntry struct {
	value *DataSourceEntry
	isSet bool
}

func (v NullableDataSourceEntry) Get() *DataSourceEntry {
	return v.value
}

func (v *NullableDataSourceEntry) Set(val *DataSourceEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSourceEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSourceEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSourceEntry(val *DataSourceEntry) *NullableDataSourceEntry {
	return &NullableDataSourceEntry{value: val, isSet: true}
}

func (v NullableDataSourceEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSourceEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
