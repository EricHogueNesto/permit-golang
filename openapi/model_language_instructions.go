/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LanguageInstructions struct for LanguageInstructions
type LanguageInstructions struct {
	Language     ProgrammingLanguage `json:"language"`
	Label        string              `json:"label"`
	Instructions string              `json:"instructions"`
}

// NewLanguageInstructions instantiates a new LanguageInstructions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLanguageInstructions(language ProgrammingLanguage, label string, instructions string) *LanguageInstructions {
	this := LanguageInstructions{}
	this.Language = language
	this.Label = label
	this.Instructions = instructions
	return &this
}

// NewLanguageInstructionsWithDefaults instantiates a new LanguageInstructions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLanguageInstructionsWithDefaults() *LanguageInstructions {
	this := LanguageInstructions{}
	return &this
}

// GetLanguage returns the Language field value
func (o *LanguageInstructions) GetLanguage() ProgrammingLanguage {
	if o == nil {
		var ret ProgrammingLanguage
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *LanguageInstructions) GetLanguageOk() (*ProgrammingLanguage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *LanguageInstructions) SetLanguage(v ProgrammingLanguage) {
	o.Language = v
}

// GetLabel returns the Label field value
func (o *LanguageInstructions) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *LanguageInstructions) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *LanguageInstructions) SetLabel(v string) {
	o.Label = v
}

// GetInstructions returns the Instructions field value
func (o *LanguageInstructions) GetInstructions() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value
// and a boolean to check if the value has been set.
func (o *LanguageInstructions) GetInstructionsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Instructions, true
}

// SetInstructions sets field value
func (o *LanguageInstructions) SetInstructions(v string) {
	o.Instructions = v
}

func (o LanguageInstructions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["language"] = o.Language
	}
	if true {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["instructions"] = o.Instructions
	}
	return json.Marshal(toSerialize)
}

type NullableLanguageInstructions struct {
	value *LanguageInstructions
	isSet bool
}

func (v NullableLanguageInstructions) Get() *LanguageInstructions {
	return v.value
}

func (v *NullableLanguageInstructions) Set(val *LanguageInstructions) {
	v.value = val
	v.isSet = true
}

func (v NullableLanguageInstructions) IsSet() bool {
	return v.isSet
}

func (v *NullableLanguageInstructions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLanguageInstructions(val *LanguageInstructions) *NullableLanguageInstructions {
	return &NullableLanguageInstructions{value: val, isSet: true}
}

func (v NullableLanguageInstructions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLanguageInstructions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
