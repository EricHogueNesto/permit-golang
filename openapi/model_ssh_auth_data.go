/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SSHAuthData struct for SSHAuthData
type SSHAuthData struct {
	AuthType *string `json:"auth_type,omitempty"`
	// SSH username
	Username string `json:"username"`
	// SSH public key
	PublicKey *string `json:"public_key,omitempty"`
	// SSH private key
	PrivateKey string `json:"private_key"`
}

// NewSSHAuthData instantiates a new SSHAuthData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSSHAuthData(username string, privateKey string) *SSHAuthData {
	this := SSHAuthData{}
	var authType string = "ssh"
	this.AuthType = &authType
	this.Username = username
	this.PrivateKey = privateKey
	return &this
}

// NewSSHAuthDataWithDefaults instantiates a new SSHAuthData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSSHAuthDataWithDefaults() *SSHAuthData {
	this := SSHAuthData{}
	var authType string = "ssh"
	this.AuthType = &authType
	return &this
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *SSHAuthData) GetAuthType() string {
	if o == nil || isNil(o.AuthType) {
		var ret string
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSHAuthData) GetAuthTypeOk() (*string, bool) {
	if o == nil || isNil(o.AuthType) {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *SSHAuthData) HasAuthType() bool {
	if o != nil && !isNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given string and assigns it to the AuthType field.
func (o *SSHAuthData) SetAuthType(v string) {
	o.AuthType = &v
}

// GetUsername returns the Username field value
func (o *SSHAuthData) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *SSHAuthData) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *SSHAuthData) SetUsername(v string) {
	o.Username = v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *SSHAuthData) GetPublicKey() string {
	if o == nil || isNil(o.PublicKey) {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSHAuthData) GetPublicKeyOk() (*string, bool) {
	if o == nil || isNil(o.PublicKey) {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *SSHAuthData) HasPublicKey() bool {
	if o != nil && !isNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *SSHAuthData) SetPublicKey(v string) {
	o.PublicKey = &v
}

// GetPrivateKey returns the PrivateKey field value
func (o *SSHAuthData) GetPrivateKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value
// and a boolean to check if the value has been set.
func (o *SSHAuthData) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateKey, true
}

// SetPrivateKey sets field value
func (o *SSHAuthData) SetPrivateKey(v string) {
	o.PrivateKey = v
}

func (o SSHAuthData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AuthType) {
		toSerialize["auth_type"] = o.AuthType
	}
	if true {
		toSerialize["username"] = o.Username
	}
	if !isNil(o.PublicKey) {
		toSerialize["public_key"] = o.PublicKey
	}
	if true {
		toSerialize["private_key"] = o.PrivateKey
	}
	return json.Marshal(toSerialize)
}

type NullableSSHAuthData struct {
	value *SSHAuthData
	isSet bool
}

func (v NullableSSHAuthData) Get() *SSHAuthData {
	return v.value
}

func (v *NullableSSHAuthData) Set(val *SSHAuthData) {
	v.value = val
	v.isSet = true
}

func (v NullableSSHAuthData) IsSet() bool {
	return v.isSet
}

func (v *NullableSSHAuthData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSSHAuthData(val *SSHAuthData) *NullableSSHAuthData {
	return &NullableSSHAuthData{value: val, isSet: true}
}

func (v NullableSSHAuthData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSSHAuthData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
