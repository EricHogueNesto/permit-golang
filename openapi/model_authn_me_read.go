/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AuthnMeRead struct for AuthnMeRead
type AuthnMeRead struct {
	Actor Actor `json:"actor"`
}

// NewAuthnMeRead instantiates a new AuthnMeRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthnMeRead(actor Actor) *AuthnMeRead {
	this := AuthnMeRead{}
	this.Actor = actor
	return &this
}

// NewAuthnMeReadWithDefaults instantiates a new AuthnMeRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthnMeReadWithDefaults() *AuthnMeRead {
	this := AuthnMeRead{}
	return &this
}

// GetActor returns the Actor field value
func (o *AuthnMeRead) GetActor() Actor {
	if o == nil {
		var ret Actor
		return ret
	}

	return o.Actor
}

// GetActorOk returns a tuple with the Actor field value
// and a boolean to check if the value has been set.
func (o *AuthnMeRead) GetActorOk() (*Actor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Actor, true
}

// SetActor sets field value
func (o *AuthnMeRead) SetActor(v Actor) {
	o.Actor = v
}

func (o AuthnMeRead) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["actor"] = o.Actor
	}
	return json.Marshal(toSerialize)
}

type NullableAuthnMeRead struct {
	value *AuthnMeRead
	isSet bool
}

func (v NullableAuthnMeRead) Get() *AuthnMeRead {
	return v.value
}

func (v *NullableAuthnMeRead) Set(val *AuthnMeRead) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthnMeRead) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthnMeRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthnMeRead(val *AuthnMeRead) *NullableAuthnMeRead {
	return &NullableAuthnMeRead{value: val, isSet: true}
}

func (v NullableAuthnMeRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthnMeRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
