/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ProjectCreate struct for ProjectCreate
type ProjectCreate struct {
	// A URL-friendly name of the project (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the project.
	Key string `json:"key"`
	// Optional namespace for URNs. If empty, URNs will be generated from project key.
	UrnNamespace *string `json:"urn_namespace,omitempty"`
	// The name of the project
	Name string `json:"name"`
	// a longer description outlining the project objectives
	Description *string `json:"description,omitempty"`
	// the settings for this project
	Settings map[string]interface{} `json:"settings,omitempty"`
	// the id of the policy repo to use for this project
	ActivePolicyRepoId *string `json:"active_policy_repo_id,omitempty"`
}

// NewProjectCreate instantiates a new ProjectCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectCreate(key string, name string) *ProjectCreate {
	this := ProjectCreate{}
	this.Key = key
	this.Name = name
	return &this
}

// NewProjectCreateWithDefaults instantiates a new ProjectCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectCreateWithDefaults() *ProjectCreate {
	this := ProjectCreate{}
	return &this
}

// GetKey returns the Key field value
func (o *ProjectCreate) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ProjectCreate) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ProjectCreate) SetKey(v string) {
	o.Key = v
}

// GetUrnNamespace returns the UrnNamespace field value if set, zero value otherwise.
func (o *ProjectCreate) GetUrnNamespace() string {
	if o == nil || isNil(o.UrnNamespace) {
		var ret string
		return ret
	}
	return *o.UrnNamespace
}

// GetUrnNamespaceOk returns a tuple with the UrnNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCreate) GetUrnNamespaceOk() (*string, bool) {
	if o == nil || isNil(o.UrnNamespace) {
		return nil, false
	}
	return o.UrnNamespace, true
}

// HasUrnNamespace returns a boolean if a field has been set.
func (o *ProjectCreate) HasUrnNamespace() bool {
	if o != nil && !isNil(o.UrnNamespace) {
		return true
	}

	return false
}

// SetUrnNamespace gets a reference to the given string and assigns it to the UrnNamespace field.
func (o *ProjectCreate) SetUrnNamespace(v string) {
	o.UrnNamespace = &v
}

// GetName returns the Name field value
func (o *ProjectCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProjectCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProjectCreate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProjectCreate) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCreate) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProjectCreate) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProjectCreate) SetDescription(v string) {
	o.Description = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *ProjectCreate) GetSettings() map[string]interface{} {
	if o == nil || isNil(o.Settings) {
		var ret map[string]interface{}
		return ret
	}
	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCreate) GetSettingsOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Settings) {
		return map[string]interface{}{}, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *ProjectCreate) HasSettings() bool {
	if o != nil && !isNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given map[string]interface{} and assigns it to the Settings field.
func (o *ProjectCreate) SetSettings(v map[string]interface{}) {
	o.Settings = v
}

// GetActivePolicyRepoId returns the ActivePolicyRepoId field value if set, zero value otherwise.
func (o *ProjectCreate) GetActivePolicyRepoId() string {
	if o == nil || isNil(o.ActivePolicyRepoId) {
		var ret string
		return ret
	}
	return *o.ActivePolicyRepoId
}

// GetActivePolicyRepoIdOk returns a tuple with the ActivePolicyRepoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCreate) GetActivePolicyRepoIdOk() (*string, bool) {
	if o == nil || isNil(o.ActivePolicyRepoId) {
		return nil, false
	}
	return o.ActivePolicyRepoId, true
}

// HasActivePolicyRepoId returns a boolean if a field has been set.
func (o *ProjectCreate) HasActivePolicyRepoId() bool {
	if o != nil && !isNil(o.ActivePolicyRepoId) {
		return true
	}

	return false
}

// SetActivePolicyRepoId gets a reference to the given string and assigns it to the ActivePolicyRepoId field.
func (o *ProjectCreate) SetActivePolicyRepoId(v string) {
	o.ActivePolicyRepoId = &v
}

func (o ProjectCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["key"] = o.Key
	}
	if !isNil(o.UrnNamespace) {
		toSerialize["urn_namespace"] = o.UrnNamespace
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	if !isNil(o.ActivePolicyRepoId) {
		toSerialize["active_policy_repo_id"] = o.ActivePolicyRepoId
	}
	return json.Marshal(toSerialize)
}

type NullableProjectCreate struct {
	value *ProjectCreate
	isSet bool
}

func (v NullableProjectCreate) Get() *ProjectCreate {
	return v.value
}

func (v *NullableProjectCreate) Set(val *ProjectCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectCreate(val *ProjectCreate) *NullableProjectCreate {
	return &NullableProjectCreate{value: val, isSet: true}
}

func (v NullableProjectCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
