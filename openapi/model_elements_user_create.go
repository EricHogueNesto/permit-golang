/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ElementsUserCreate struct for ElementsUserCreate
type ElementsUserCreate struct {
	// A unique id by which Permit will identify the user for permission checks.
	Key string `json:"key"`
	// The email of the user. If synced, will be unique inside the environment.
	Email *string `json:"email,omitempty"`
	// First name of the user.
	FirstName *string `json:"first_name,omitempty"`
	// Last name of the user.
	LastName *string `json:"last_name,omitempty"`
	// Arbitraty user attributes that will be used to enforce attribute-based access control policies.
	Attributes map[string]interface{} `json:"attributes,omitempty"`
	Role       *string                `json:"role,omitempty"`
}

// NewElementsUserCreate instantiates a new ElementsUserCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElementsUserCreate(key string) *ElementsUserCreate {
	this := ElementsUserCreate{}
	this.Key = key
	return &this
}

// NewElementsUserCreateWithDefaults instantiates a new ElementsUserCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElementsUserCreateWithDefaults() *ElementsUserCreate {
	this := ElementsUserCreate{}
	return &this
}

// GetKey returns the Key field value
func (o *ElementsUserCreate) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ElementsUserCreate) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ElementsUserCreate) SetKey(v string) {
	o.Key = v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ElementsUserCreate) GetEmail() string {
	if o == nil || isNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementsUserCreate) GetEmailOk() (*string, bool) {
	if o == nil || isNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ElementsUserCreate) HasEmail() bool {
	if o != nil && !isNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ElementsUserCreate) SetEmail(v string) {
	o.Email = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *ElementsUserCreate) GetFirstName() string {
	if o == nil || isNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementsUserCreate) GetFirstNameOk() (*string, bool) {
	if o == nil || isNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *ElementsUserCreate) HasFirstName() bool {
	if o != nil && !isNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *ElementsUserCreate) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *ElementsUserCreate) GetLastName() string {
	if o == nil || isNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementsUserCreate) GetLastNameOk() (*string, bool) {
	if o == nil || isNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *ElementsUserCreate) HasLastName() bool {
	if o != nil && !isNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *ElementsUserCreate) SetLastName(v string) {
	o.LastName = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *ElementsUserCreate) GetAttributes() map[string]interface{} {
	if o == nil || isNil(o.Attributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementsUserCreate) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Attributes) {
		return map[string]interface{}{}, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *ElementsUserCreate) HasAttributes() bool {
	if o != nil && !isNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *ElementsUserCreate) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *ElementsUserCreate) GetRole() string {
	if o == nil || isNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementsUserCreate) GetRoleOk() (*string, bool) {
	if o == nil || isNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *ElementsUserCreate) HasRole() bool {
	if o != nil && !isNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *ElementsUserCreate) SetRole(v string) {
	o.Role = &v
}

func (o ElementsUserCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["key"] = o.Key
	}
	if !isNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !isNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !isNil(o.LastName) {
		toSerialize["last_name"] = o.LastName
	}
	if !isNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !isNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	return json.Marshal(toSerialize)
}

type NullableElementsUserCreate struct {
	value *ElementsUserCreate
	isSet bool
}

func (v NullableElementsUserCreate) Get() *ElementsUserCreate {
	return v.value
}

func (v *NullableElementsUserCreate) Set(val *ElementsUserCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableElementsUserCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableElementsUserCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElementsUserCreate(val *ElementsUserCreate) *NullableElementsUserCreate {
	return &NullableElementsUserCreate{value: val, isSet: true}
}

func (v NullableElementsUserCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElementsUserCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
