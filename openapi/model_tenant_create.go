/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TenantCreate struct for TenantCreate
type TenantCreate struct {
	// A unique id by which Permit will identify the tenant. The tenant key must be url-friendly (slugified).
	Key string `json:"key"`
	// A descriptive name for the tenant
	Name string `json:"name"`
	// an optional longer description of the tenant
	Description *string `json:"description,omitempty"`
	// Arbitraty tenant attributes that will be used to enforce attribute-based access control policies.
	Attributes map[string]interface{} `json:"attributes,omitempty"`
}

// NewTenantCreate instantiates a new TenantCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantCreate(key string, name string) *TenantCreate {
	this := TenantCreate{}
	this.Key = key
	this.Name = name
	return &this
}

// NewTenantCreateWithDefaults instantiates a new TenantCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantCreateWithDefaults() *TenantCreate {
	this := TenantCreate{}
	return &this
}

// GetKey returns the Key field value
func (o *TenantCreate) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *TenantCreate) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *TenantCreate) SetKey(v string) {
	o.Key = v
}

// GetName returns the Name field value
func (o *TenantCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TenantCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TenantCreate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TenantCreate) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantCreate) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TenantCreate) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TenantCreate) SetDescription(v string) {
	o.Description = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *TenantCreate) GetAttributes() map[string]interface{} {
	if o == nil || isNil(o.Attributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantCreate) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Attributes) {
		return map[string]interface{}{}, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *TenantCreate) HasAttributes() bool {
	if o != nil && !isNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *TenantCreate) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

func (o TenantCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["key"] = o.Key
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	return json.Marshal(toSerialize)
}

type NullableTenantCreate struct {
	value *TenantCreate
	isSet bool
}

func (v NullableTenantCreate) Get() *TenantCreate {
	return v.value
}

func (v *NullableTenantCreate) Set(val *TenantCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantCreate(val *TenantCreate) *NullableTenantCreate {
	return &NullableTenantCreate{value: val, isSet: true}
}

func (v NullableTenantCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
