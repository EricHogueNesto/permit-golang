/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResourceAttributeUpdate struct for ResourceAttributeUpdate
type ResourceAttributeUpdate struct {
	// The type of the attribute, we currently support: `bool`, `number` (ints, floats), `time` (a timestamp), `string`, and `json`.
	Type *AttributeType `json:"type,omitempty"`
	// An optional longer description of what this attribute respresents in your system
	Description *string `json:"description,omitempty"`
}

// NewResourceAttributeUpdate instantiates a new ResourceAttributeUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceAttributeUpdate() *ResourceAttributeUpdate {
	this := ResourceAttributeUpdate{}
	return &this
}

// NewResourceAttributeUpdateWithDefaults instantiates a new ResourceAttributeUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceAttributeUpdateWithDefaults() *ResourceAttributeUpdate {
	this := ResourceAttributeUpdate{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ResourceAttributeUpdate) GetType() AttributeType {
	if o == nil || isNil(o.Type) {
		var ret AttributeType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceAttributeUpdate) GetTypeOk() (*AttributeType, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ResourceAttributeUpdate) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given AttributeType and assigns it to the Type field.
func (o *ResourceAttributeUpdate) SetType(v AttributeType) {
	o.Type = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ResourceAttributeUpdate) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceAttributeUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ResourceAttributeUpdate) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ResourceAttributeUpdate) SetDescription(v string) {
	o.Description = &v
}

func (o ResourceAttributeUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableResourceAttributeUpdate struct {
	value *ResourceAttributeUpdate
	isSet bool
}

func (v NullableResourceAttributeUpdate) Get() *ResourceAttributeUpdate {
	return v.value
}

func (v *NullableResourceAttributeUpdate) Set(val *ResourceAttributeUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceAttributeUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceAttributeUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceAttributeUpdate(val *ResourceAttributeUpdate) *NullableResourceAttributeUpdate {
	return &NullableResourceAttributeUpdate{value: val, isSet: true}
}

func (v NullableResourceAttributeUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceAttributeUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
