/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RemoveRolePermissions struct for RemoveRolePermissions
type RemoveRolePermissions struct {
	// List of permissions to remove from the role. If a permission is not found it is skipped. Each permission can be either a resource action id, or `{resource_key}:{action_key}`,i.e: the \"permission name\".
	Permissions []string `json:"permissions"`
}

// NewRemoveRolePermissions instantiates a new RemoveRolePermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoveRolePermissions(permissions []string) *RemoveRolePermissions {
	this := RemoveRolePermissions{}
	this.Permissions = permissions
	return &this
}

// NewRemoveRolePermissionsWithDefaults instantiates a new RemoveRolePermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoveRolePermissionsWithDefaults() *RemoveRolePermissions {
	this := RemoveRolePermissions{}
	return &this
}

// GetPermissions returns the Permissions field value
func (o *RemoveRolePermissions) GetPermissions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *RemoveRolePermissions) GetPermissionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *RemoveRolePermissions) SetPermissions(v []string) {
	o.Permissions = v
}

func (o RemoveRolePermissions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["permissions"] = o.Permissions
	}
	return json.Marshal(toSerialize)
}

type NullableRemoveRolePermissions struct {
	value *RemoveRolePermissions
	isSet bool
}

func (v NullableRemoveRolePermissions) Get() *RemoveRolePermissions {
	return v.value
}

func (v *NullableRemoveRolePermissions) Set(val *RemoveRolePermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoveRolePermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoveRolePermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoveRolePermissions(val *RemoveRolePermissions) *NullableRemoveRolePermissions {
	return &NullableRemoveRolePermissions{value: val, isSet: true}
}

func (v NullableRemoveRolePermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoveRolePermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
