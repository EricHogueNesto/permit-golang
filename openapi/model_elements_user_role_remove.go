/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ElementsUserRoleRemove struct for ElementsUserRoleRemove
type ElementsUserRoleRemove struct {
	// the role that will be unassigned (accepts either the role id or the role key)
	Role string `json:"role"`
}

// NewElementsUserRoleRemove instantiates a new ElementsUserRoleRemove object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElementsUserRoleRemove(role string) *ElementsUserRoleRemove {
	this := ElementsUserRoleRemove{}
	this.Role = role
	return &this
}

// NewElementsUserRoleRemoveWithDefaults instantiates a new ElementsUserRoleRemove object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElementsUserRoleRemoveWithDefaults() *ElementsUserRoleRemove {
	this := ElementsUserRoleRemove{}
	return &this
}

// GetRole returns the Role field value
func (o *ElementsUserRoleRemove) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *ElementsUserRoleRemove) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *ElementsUserRoleRemove) SetRole(v string) {
	o.Role = v
}

func (o ElementsUserRoleRemove) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["role"] = o.Role
	}
	return json.Marshal(toSerialize)
}

type NullableElementsUserRoleRemove struct {
	value *ElementsUserRoleRemove
	isSet bool
}

func (v NullableElementsUserRoleRemove) Get() *ElementsUserRoleRemove {
	return v.value
}

func (v *NullableElementsUserRoleRemove) Set(val *ElementsUserRoleRemove) {
	v.value = val
	v.isSet = true
}

func (v NullableElementsUserRoleRemove) IsSet() bool {
	return v.isSet
}

func (v *NullableElementsUserRoleRemove) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElementsUserRoleRemove(val *ElementsUserRoleRemove) *NullableElementsUserRoleRemove {
	return &NullableElementsUserRoleRemove{value: val, isSet: true}
}

func (v NullableElementsUserRoleRemove) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElementsUserRoleRemove) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
