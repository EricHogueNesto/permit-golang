/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MultiInviteResult struct for MultiInviteResult
type MultiInviteResult struct {
	Success []InviteRead `json:"success"`
	// invites that were not even attempted, and the reason why
	Failed []FailedInvite `json:"failed,omitempty"`
}

// NewMultiInviteResult instantiates a new MultiInviteResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiInviteResult(success []InviteRead) *MultiInviteResult {
	this := MultiInviteResult{}
	this.Success = success
	return &this
}

// NewMultiInviteResultWithDefaults instantiates a new MultiInviteResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiInviteResultWithDefaults() *MultiInviteResult {
	this := MultiInviteResult{}
	return &this
}

// GetSuccess returns the Success field value
func (o *MultiInviteResult) GetSuccess() []InviteRead {
	if o == nil {
		var ret []InviteRead
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *MultiInviteResult) GetSuccessOk() ([]InviteRead, bool) {
	if o == nil {
		return nil, false
	}
	return o.Success, true
}

// SetSuccess sets field value
func (o *MultiInviteResult) SetSuccess(v []InviteRead) {
	o.Success = v
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *MultiInviteResult) GetFailed() []FailedInvite {
	if o == nil || isNil(o.Failed) {
		var ret []FailedInvite
		return ret
	}
	return o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiInviteResult) GetFailedOk() ([]FailedInvite, bool) {
	if o == nil || isNil(o.Failed) {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *MultiInviteResult) HasFailed() bool {
	if o != nil && !isNil(o.Failed) {
		return true
	}

	return false
}

// SetFailed gets a reference to the given []FailedInvite and assigns it to the Failed field.
func (o *MultiInviteResult) SetFailed(v []FailedInvite) {
	o.Failed = v
}

func (o MultiInviteResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["success"] = o.Success
	}
	if !isNil(o.Failed) {
		toSerialize["failed"] = o.Failed
	}
	return json.Marshal(toSerialize)
}

type NullableMultiInviteResult struct {
	value *MultiInviteResult
	isSet bool
}

func (v NullableMultiInviteResult) Get() *MultiInviteResult {
	return v.value
}

func (v *NullableMultiInviteResult) Set(val *MultiInviteResult) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiInviteResult) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiInviteResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiInviteResult(val *MultiInviteResult) *NullableMultiInviteResult {
	return &NullableMultiInviteResult{value: val, isSet: true}
}

func (v NullableMultiInviteResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiInviteResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
