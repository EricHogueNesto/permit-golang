/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MemberAccessLevel An enumeration.
type MemberAccessLevel string

// List of MemberAccessLevel
const (
	READ  MemberAccessLevel = "read"
	WRITE MemberAccessLevel = "write"
	ADMIN MemberAccessLevel = "admin"
)

// All allowed values of MemberAccessLevel enum
var AllowedMemberAccessLevelEnumValues = []MemberAccessLevel{
	"read",
	"write",
	"admin",
}

func (v *MemberAccessLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MemberAccessLevel(value)
	for _, existing := range AllowedMemberAccessLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MemberAccessLevel", value)
}

// NewMemberAccessLevelFromValue returns a pointer to a valid MemberAccessLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMemberAccessLevelFromValue(v string) (*MemberAccessLevel, error) {
	ev := MemberAccessLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MemberAccessLevel: valid values are %v", v, AllowedMemberAccessLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MemberAccessLevel) IsValid() bool {
	for _, existing := range AllowedMemberAccessLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MemberAccessLevel value
func (v MemberAccessLevel) Ptr() *MemberAccessLevel {
	return &v
}

type NullableMemberAccessLevel struct {
	value *MemberAccessLevel
	isSet bool
}

func (v NullableMemberAccessLevel) Get() *MemberAccessLevel {
	return v.value
}

func (v *NullableMemberAccessLevel) Set(val *MemberAccessLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberAccessLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberAccessLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberAccessLevel(val *MemberAccessLevel) *NullableMemberAccessLevel {
	return &NullableMemberAccessLevel{value: val, isSet: true}
}

func (v NullableMemberAccessLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberAccessLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
