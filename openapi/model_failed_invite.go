/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FailedInvite struct for FailedInvite
type FailedInvite struct {
	Email  string `json:"email"`
	Reason string `json:"reason"`
}

// NewFailedInvite instantiates a new FailedInvite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailedInvite(email string, reason string) *FailedInvite {
	this := FailedInvite{}
	this.Email = email
	this.Reason = reason
	return &this
}

// NewFailedInviteWithDefaults instantiates a new FailedInvite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailedInviteWithDefaults() *FailedInvite {
	this := FailedInvite{}
	return &this
}

// GetEmail returns the Email field value
func (o *FailedInvite) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *FailedInvite) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *FailedInvite) SetEmail(v string) {
	o.Email = v
}

// GetReason returns the Reason field value
func (o *FailedInvite) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *FailedInvite) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *FailedInvite) SetReason(v string) {
	o.Reason = v
}

func (o FailedInvite) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableFailedInvite struct {
	value *FailedInvite
	isSet bool
}

func (v NullableFailedInvite) Get() *FailedInvite {
	return v.value
}

func (v *NullableFailedInvite) Set(val *FailedInvite) {
	v.value = val
	v.isSet = true
}

func (v NullableFailedInvite) IsSet() bool {
	return v.isSet
}

func (v *NullableFailedInvite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailedInvite(val *FailedInvite) *NullableFailedInvite {
	return &NullableFailedInvite{value: val, isSet: true}
}

func (v NullableFailedInvite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailedInvite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
