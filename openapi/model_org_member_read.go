/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// OrgMemberRead struct for OrgMemberRead
type OrgMemberRead struct {
	// Unique id of the account member
	Id string `json:"id"`
	// Email of the user controlling this account
	Email string `json:"email"`
	// Whether this email address is verified or not. For social providers like 'Login with Google' this is done automatically, otherwise we will send the user a verification link in email.
	EmailVerified bool `json:"email_verified"`
	// Name of this user
	Name *string `json:"name,omitempty"`
	// First name of the user
	GivenName *string `json:"given_name,omitempty"`
	// Last name of the user
	FamilyName *string `json:"family_name,omitempty"`
	// URL to picture, photo, or avatar of the user that controls this account.
	Picture *string `json:"picture,omitempty"`
	// Whether or not this user has special access to permit.io organizations
	IsSuperuser bool `json:"is_superuser"`
	// Whether or not this user is currently onboarding, needs to be replaced by a user journey object
	IsOnboarding bool `json:"is_onboarding"`
	// the step the user is currently going through in onboarding
	OnboardingStep OnboardingStep `json:"onboarding_step"`
	// Date and time when the account member was created (ISO_8601 format).
	CreatedAt time.Time `json:"created_at"`
	// Last date and time this user logged in (ISO_8601 format).
	LastLogin *time.Time `json:"last_login,omitempty"`
	// Last IP address from which this user logged in.
	LastIp *string `json:"last_ip,omitempty"`
	// Total number of logins this user has performed.
	LoginsCount *int32         `json:"logins_count,omitempty"`
	Identities  []IdentityRead `json:"identities"`
	// Custom permit.io dashboard settings, such as preferred theme, etc.
	Settings map[string]interface{} `json:"settings"`
}

// NewOrgMemberRead instantiates a new OrgMemberRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgMemberRead(id string, email string, emailVerified bool, isSuperuser bool, isOnboarding bool, onboardingStep OnboardingStep, createdAt time.Time, identities []IdentityRead, settings map[string]interface{}) *OrgMemberRead {
	this := OrgMemberRead{}
	this.Id = id
	this.Email = email
	this.EmailVerified = emailVerified
	this.IsSuperuser = isSuperuser
	this.IsOnboarding = isOnboarding
	this.OnboardingStep = onboardingStep
	this.CreatedAt = createdAt
	var lastIp string = "0.0.0.0"
	this.LastIp = &lastIp
	var loginsCount int32 = 0
	this.LoginsCount = &loginsCount
	this.Identities = identities
	this.Settings = settings
	return &this
}

// NewOrgMemberReadWithDefaults instantiates a new OrgMemberRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgMemberReadWithDefaults() *OrgMemberRead {
	this := OrgMemberRead{}
	var lastIp string = "0.0.0.0"
	this.LastIp = &lastIp
	var loginsCount int32 = 0
	this.LoginsCount = &loginsCount
	return &this
}

// GetId returns the Id field value
func (o *OrgMemberRead) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OrgMemberRead) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OrgMemberRead) SetId(v string) {
	o.Id = v
}

// GetEmail returns the Email field value
func (o *OrgMemberRead) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *OrgMemberRead) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *OrgMemberRead) SetEmail(v string) {
	o.Email = v
}

// GetEmailVerified returns the EmailVerified field value
func (o *OrgMemberRead) GetEmailVerified() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EmailVerified
}

// GetEmailVerifiedOk returns a tuple with the EmailVerified field value
// and a boolean to check if the value has been set.
func (o *OrgMemberRead) GetEmailVerifiedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmailVerified, true
}

// SetEmailVerified sets field value
func (o *OrgMemberRead) SetEmailVerified(v bool) {
	o.EmailVerified = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OrgMemberRead) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgMemberRead) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OrgMemberRead) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OrgMemberRead) SetName(v string) {
	o.Name = &v
}

// GetGivenName returns the GivenName field value if set, zero value otherwise.
func (o *OrgMemberRead) GetGivenName() string {
	if o == nil || isNil(o.GivenName) {
		var ret string
		return ret
	}
	return *o.GivenName
}

// GetGivenNameOk returns a tuple with the GivenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgMemberRead) GetGivenNameOk() (*string, bool) {
	if o == nil || isNil(o.GivenName) {
		return nil, false
	}
	return o.GivenName, true
}

// HasGivenName returns a boolean if a field has been set.
func (o *OrgMemberRead) HasGivenName() bool {
	if o != nil && !isNil(o.GivenName) {
		return true
	}

	return false
}

// SetGivenName gets a reference to the given string and assigns it to the GivenName field.
func (o *OrgMemberRead) SetGivenName(v string) {
	o.GivenName = &v
}

// GetFamilyName returns the FamilyName field value if set, zero value otherwise.
func (o *OrgMemberRead) GetFamilyName() string {
	if o == nil || isNil(o.FamilyName) {
		var ret string
		return ret
	}
	return *o.FamilyName
}

// GetFamilyNameOk returns a tuple with the FamilyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgMemberRead) GetFamilyNameOk() (*string, bool) {
	if o == nil || isNil(o.FamilyName) {
		return nil, false
	}
	return o.FamilyName, true
}

// HasFamilyName returns a boolean if a field has been set.
func (o *OrgMemberRead) HasFamilyName() bool {
	if o != nil && !isNil(o.FamilyName) {
		return true
	}

	return false
}

// SetFamilyName gets a reference to the given string and assigns it to the FamilyName field.
func (o *OrgMemberRead) SetFamilyName(v string) {
	o.FamilyName = &v
}

// GetPicture returns the Picture field value if set, zero value otherwise.
func (o *OrgMemberRead) GetPicture() string {
	if o == nil || isNil(o.Picture) {
		var ret string
		return ret
	}
	return *o.Picture
}

// GetPictureOk returns a tuple with the Picture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgMemberRead) GetPictureOk() (*string, bool) {
	if o == nil || isNil(o.Picture) {
		return nil, false
	}
	return o.Picture, true
}

// HasPicture returns a boolean if a field has been set.
func (o *OrgMemberRead) HasPicture() bool {
	if o != nil && !isNil(o.Picture) {
		return true
	}

	return false
}

// SetPicture gets a reference to the given string and assigns it to the Picture field.
func (o *OrgMemberRead) SetPicture(v string) {
	o.Picture = &v
}

// GetIsSuperuser returns the IsSuperuser field value
func (o *OrgMemberRead) GetIsSuperuser() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSuperuser
}

// GetIsSuperuserOk returns a tuple with the IsSuperuser field value
// and a boolean to check if the value has been set.
func (o *OrgMemberRead) GetIsSuperuserOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsSuperuser, true
}

// SetIsSuperuser sets field value
func (o *OrgMemberRead) SetIsSuperuser(v bool) {
	o.IsSuperuser = v
}

// GetIsOnboarding returns the IsOnboarding field value
func (o *OrgMemberRead) GetIsOnboarding() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsOnboarding
}

// GetIsOnboardingOk returns a tuple with the IsOnboarding field value
// and a boolean to check if the value has been set.
func (o *OrgMemberRead) GetIsOnboardingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsOnboarding, true
}

// SetIsOnboarding sets field value
func (o *OrgMemberRead) SetIsOnboarding(v bool) {
	o.IsOnboarding = v
}

// GetOnboardingStep returns the OnboardingStep field value
func (o *OrgMemberRead) GetOnboardingStep() OnboardingStep {
	if o == nil {
		var ret OnboardingStep
		return ret
	}

	return o.OnboardingStep
}

// GetOnboardingStepOk returns a tuple with the OnboardingStep field value
// and a boolean to check if the value has been set.
func (o *OrgMemberRead) GetOnboardingStepOk() (*OnboardingStep, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OnboardingStep, true
}

// SetOnboardingStep sets field value
func (o *OrgMemberRead) SetOnboardingStep(v OnboardingStep) {
	o.OnboardingStep = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *OrgMemberRead) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *OrgMemberRead) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *OrgMemberRead) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetLastLogin returns the LastLogin field value if set, zero value otherwise.
func (o *OrgMemberRead) GetLastLogin() time.Time {
	if o == nil || isNil(o.LastLogin) {
		var ret time.Time
		return ret
	}
	return *o.LastLogin
}

// GetLastLoginOk returns a tuple with the LastLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgMemberRead) GetLastLoginOk() (*time.Time, bool) {
	if o == nil || isNil(o.LastLogin) {
		return nil, false
	}
	return o.LastLogin, true
}

// HasLastLogin returns a boolean if a field has been set.
func (o *OrgMemberRead) HasLastLogin() bool {
	if o != nil && !isNil(o.LastLogin) {
		return true
	}

	return false
}

// SetLastLogin gets a reference to the given time.Time and assigns it to the LastLogin field.
func (o *OrgMemberRead) SetLastLogin(v time.Time) {
	o.LastLogin = &v
}

// GetLastIp returns the LastIp field value if set, zero value otherwise.
func (o *OrgMemberRead) GetLastIp() string {
	if o == nil || isNil(o.LastIp) {
		var ret string
		return ret
	}
	return *o.LastIp
}

// GetLastIpOk returns a tuple with the LastIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgMemberRead) GetLastIpOk() (*string, bool) {
	if o == nil || isNil(o.LastIp) {
		return nil, false
	}
	return o.LastIp, true
}

// HasLastIp returns a boolean if a field has been set.
func (o *OrgMemberRead) HasLastIp() bool {
	if o != nil && !isNil(o.LastIp) {
		return true
	}

	return false
}

// SetLastIp gets a reference to the given string and assigns it to the LastIp field.
func (o *OrgMemberRead) SetLastIp(v string) {
	o.LastIp = &v
}

// GetLoginsCount returns the LoginsCount field value if set, zero value otherwise.
func (o *OrgMemberRead) GetLoginsCount() int32 {
	if o == nil || isNil(o.LoginsCount) {
		var ret int32
		return ret
	}
	return *o.LoginsCount
}

// GetLoginsCountOk returns a tuple with the LoginsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgMemberRead) GetLoginsCountOk() (*int32, bool) {
	if o == nil || isNil(o.LoginsCount) {
		return nil, false
	}
	return o.LoginsCount, true
}

// HasLoginsCount returns a boolean if a field has been set.
func (o *OrgMemberRead) HasLoginsCount() bool {
	if o != nil && !isNil(o.LoginsCount) {
		return true
	}

	return false
}

// SetLoginsCount gets a reference to the given int32 and assigns it to the LoginsCount field.
func (o *OrgMemberRead) SetLoginsCount(v int32) {
	o.LoginsCount = &v
}

// GetIdentities returns the Identities field value
func (o *OrgMemberRead) GetIdentities() []IdentityRead {
	if o == nil {
		var ret []IdentityRead
		return ret
	}

	return o.Identities
}

// GetIdentitiesOk returns a tuple with the Identities field value
// and a boolean to check if the value has been set.
func (o *OrgMemberRead) GetIdentitiesOk() ([]IdentityRead, bool) {
	if o == nil {
		return nil, false
	}
	return o.Identities, true
}

// SetIdentities sets field value
func (o *OrgMemberRead) SetIdentities(v []IdentityRead) {
	o.Identities = v
}

// GetSettings returns the Settings field value
func (o *OrgMemberRead) GetSettings() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value
// and a boolean to check if the value has been set.
func (o *OrgMemberRead) GetSettingsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Settings, true
}

// SetSettings sets field value
func (o *OrgMemberRead) SetSettings(v map[string]interface{}) {
	o.Settings = v
}

func (o OrgMemberRead) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["email_verified"] = o.EmailVerified
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.GivenName) {
		toSerialize["given_name"] = o.GivenName
	}
	if !isNil(o.FamilyName) {
		toSerialize["family_name"] = o.FamilyName
	}
	if !isNil(o.Picture) {
		toSerialize["picture"] = o.Picture
	}
	if true {
		toSerialize["is_superuser"] = o.IsSuperuser
	}
	if true {
		toSerialize["is_onboarding"] = o.IsOnboarding
	}
	if true {
		toSerialize["onboarding_step"] = o.OnboardingStep
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !isNil(o.LastLogin) {
		toSerialize["last_login"] = o.LastLogin
	}
	if !isNil(o.LastIp) {
		toSerialize["last_ip"] = o.LastIp
	}
	if !isNil(o.LoginsCount) {
		toSerialize["logins_count"] = o.LoginsCount
	}
	if true {
		toSerialize["identities"] = o.Identities
	}
	if true {
		toSerialize["settings"] = o.Settings
	}
	return json.Marshal(toSerialize)
}

type NullableOrgMemberRead struct {
	value *OrgMemberRead
	isSet bool
}

func (v NullableOrgMemberRead) Get() *OrgMemberRead {
	return v.value
}

func (v *NullableOrgMemberRead) Set(val *OrgMemberRead) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgMemberRead) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgMemberRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgMemberRead(val *OrgMemberRead) *NullableOrgMemberRead {
	return &NullableOrgMemberRead{value: val, isSet: true}
}

func (v NullableOrgMemberRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgMemberRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
