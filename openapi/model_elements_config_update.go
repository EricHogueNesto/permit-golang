/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ElementsConfigUpdate struct for ElementsConfigUpdate
type ElementsConfigUpdate struct {
	// The name of the elements_config
	Name *string `json:"name,omitempty"`
	// The type of the elements interface, e.g: user management
	ElementsType *ElementsType `json:"elements_type,omitempty"`
	// Obj with the options of the elements interface, e.g: primary color
	Settings *map[string]Settings `json:"settings,omitempty"`
	// Obj with levels as keys and role ids as values
	RolesToLevels map[string][]string `json:"roles_to_levels"`
	Webhook       *WebhookUpdate      `json:"webhook,omitempty"`
}

// NewElementsConfigUpdate instantiates a new ElementsConfigUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElementsConfigUpdate(rolesToLevels map[string][]string) *ElementsConfigUpdate {
	this := ElementsConfigUpdate{}
	this.RolesToLevels = rolesToLevels
	return &this
}

// NewElementsConfigUpdateWithDefaults instantiates a new ElementsConfigUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElementsConfigUpdateWithDefaults() *ElementsConfigUpdate {
	this := ElementsConfigUpdate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ElementsConfigUpdate) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementsConfigUpdate) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ElementsConfigUpdate) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ElementsConfigUpdate) SetName(v string) {
	o.Name = &v
}

// GetElementsType returns the ElementsType field value if set, zero value otherwise.
func (o *ElementsConfigUpdate) GetElementsType() ElementsType {
	if o == nil || isNil(o.ElementsType) {
		var ret ElementsType
		return ret
	}
	return *o.ElementsType
}

// GetElementsTypeOk returns a tuple with the ElementsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementsConfigUpdate) GetElementsTypeOk() (*ElementsType, bool) {
	if o == nil || isNil(o.ElementsType) {
		return nil, false
	}
	return o.ElementsType, true
}

// HasElementsType returns a boolean if a field has been set.
func (o *ElementsConfigUpdate) HasElementsType() bool {
	if o != nil && !isNil(o.ElementsType) {
		return true
	}

	return false
}

// SetElementsType gets a reference to the given ElementsType and assigns it to the ElementsType field.
func (o *ElementsConfigUpdate) SetElementsType(v ElementsType) {
	o.ElementsType = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *ElementsConfigUpdate) GetSettings() map[string]Settings {
	if o == nil || isNil(o.Settings) {
		var ret map[string]Settings
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementsConfigUpdate) GetSettingsOk() (*map[string]Settings, bool) {
	if o == nil || isNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *ElementsConfigUpdate) HasSettings() bool {
	if o != nil && !isNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given map[string]Settings and assigns it to the Settings field.
func (o *ElementsConfigUpdate) SetSettings(v map[string]Settings) {
	o.Settings = &v
}

// GetRolesToLevels returns the RolesToLevels field value
func (o *ElementsConfigUpdate) GetRolesToLevels() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}

	return o.RolesToLevels
}

// GetRolesToLevelsOk returns a tuple with the RolesToLevels field value
// and a boolean to check if the value has been set.
func (o *ElementsConfigUpdate) GetRolesToLevelsOk() (*map[string][]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RolesToLevels, true
}

// SetRolesToLevels sets field value
func (o *ElementsConfigUpdate) SetRolesToLevels(v map[string][]string) {
	o.RolesToLevels = v
}

// GetWebhook returns the Webhook field value if set, zero value otherwise.
func (o *ElementsConfigUpdate) GetWebhook() WebhookUpdate {
	if o == nil || isNil(o.Webhook) {
		var ret WebhookUpdate
		return ret
	}
	return *o.Webhook
}

// GetWebhookOk returns a tuple with the Webhook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElementsConfigUpdate) GetWebhookOk() (*WebhookUpdate, bool) {
	if o == nil || isNil(o.Webhook) {
		return nil, false
	}
	return o.Webhook, true
}

// HasWebhook returns a boolean if a field has been set.
func (o *ElementsConfigUpdate) HasWebhook() bool {
	if o != nil && !isNil(o.Webhook) {
		return true
	}

	return false
}

// SetWebhook gets a reference to the given WebhookUpdate and assigns it to the Webhook field.
func (o *ElementsConfigUpdate) SetWebhook(v WebhookUpdate) {
	o.Webhook = &v
}

func (o ElementsConfigUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.ElementsType) {
		toSerialize["elements_type"] = o.ElementsType
	}
	if !isNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	if true {
		toSerialize["roles_to_levels"] = o.RolesToLevels
	}
	if !isNil(o.Webhook) {
		toSerialize["webhook"] = o.Webhook
	}
	return json.Marshal(toSerialize)
}

type NullableElementsConfigUpdate struct {
	value *ElementsConfigUpdate
	isSet bool
}

func (v NullableElementsConfigUpdate) Get() *ElementsConfigUpdate {
	return v.value
}

func (v *NullableElementsConfigUpdate) Set(val *ElementsConfigUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableElementsConfigUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableElementsConfigUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElementsConfigUpdate(val *ElementsConfigUpdate) *NullableElementsConfigUpdate {
	return &NullableElementsConfigUpdate{value: val, isSet: true}
}

func (v NullableElementsConfigUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElementsConfigUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
