/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Labels struct for Labels
type Labels struct {
	Id      string `json:"id"`
	Version string `json:"version"`
}

// NewLabels instantiates a new Labels object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLabels(id string, version string) *Labels {
	this := Labels{}
	this.Id = id
	this.Version = version
	return &this
}

// NewLabelsWithDefaults instantiates a new Labels object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabelsWithDefaults() *Labels {
	this := Labels{}
	return &this
}

// GetId returns the Id field value
func (o *Labels) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Labels) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Labels) SetId(v string) {
	o.Id = v
}

// GetVersion returns the Version field value
func (o *Labels) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *Labels) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *Labels) SetVersion(v string) {
	o.Version = v
}

func (o Labels) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableLabels struct {
	value *Labels
	isSet bool
}

func (v NullableLabels) Get() *Labels {
	return v.value
}

func (v *NullableLabels) Set(val *Labels) {
	v.value = val
	v.isSet = true
}

func (v NullableLabels) IsSet() bool {
	return v.isSet
}

func (v *NullableLabels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabels(val *Labels) *NullableLabels {
	return &NullableLabels{value: val, isSet: true}
}

func (v NullableLabels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
