/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OrganizationUpdate struct for OrganizationUpdate
type OrganizationUpdate struct {
	// The name of the organization, usually it's your company's name.
	Name *string `json:"name,omitempty"`
	// the settings for this project
	Settings map[string]interface{} `json:"settings,omitempty"`
}

// NewOrganizationUpdate instantiates a new OrganizationUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationUpdate() *OrganizationUpdate {
	this := OrganizationUpdate{}
	return &this
}

// NewOrganizationUpdateWithDefaults instantiates a new OrganizationUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationUpdateWithDefaults() *OrganizationUpdate {
	this := OrganizationUpdate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OrganizationUpdate) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationUpdate) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OrganizationUpdate) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OrganizationUpdate) SetName(v string) {
	o.Name = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *OrganizationUpdate) GetSettings() map[string]interface{} {
	if o == nil || isNil(o.Settings) {
		var ret map[string]interface{}
		return ret
	}
	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationUpdate) GetSettingsOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Settings) {
		return map[string]interface{}{}, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *OrganizationUpdate) HasSettings() bool {
	if o != nil && !isNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given map[string]interface{} and assigns it to the Settings field.
func (o *OrganizationUpdate) SetSettings(v map[string]interface{}) {
	o.Settings = v
}

func (o OrganizationUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	return json.Marshal(toSerialize)
}

type NullableOrganizationUpdate struct {
	value *OrganizationUpdate
	isSet bool
}

func (v NullableOrganizationUpdate) Get() *OrganizationUpdate {
	return v.value
}

func (v *NullableOrganizationUpdate) Set(val *OrganizationUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationUpdate(val *OrganizationUpdate) *NullableOrganizationUpdate {
	return &NullableOrganizationUpdate{value: val, isSet: true}
}

func (v NullableOrganizationUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
