/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PolicyRepoCreate struct for PolicyRepoCreate
type PolicyRepoCreate struct {
	// A URL-friendly name of the policy repo (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the policy repo.
	Key            string      `json:"key"`
	Url            string      `json:"url"`
	MainBranchName *string     `json:"main_branch_name,omitempty"`
	Credentials    SSHAuthData `json:"credentials"`
	// if you want to change your policy repository to this repo right after it is validated
	ActivateWhenValidated *bool `json:"activate_when_validated,omitempty"`
}

// NewPolicyRepoCreate instantiates a new PolicyRepoCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyRepoCreate(key string, url string, credentials SSHAuthData) *PolicyRepoCreate {
	this := PolicyRepoCreate{}
	this.Key = key
	this.Url = url
	var mainBranchName string = "main"
	this.MainBranchName = &mainBranchName
	this.Credentials = credentials
	var activateWhenValidated bool = false
	this.ActivateWhenValidated = &activateWhenValidated
	return &this
}

// NewPolicyRepoCreateWithDefaults instantiates a new PolicyRepoCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyRepoCreateWithDefaults() *PolicyRepoCreate {
	this := PolicyRepoCreate{}
	var mainBranchName string = "main"
	this.MainBranchName = &mainBranchName
	var activateWhenValidated bool = false
	this.ActivateWhenValidated = &activateWhenValidated
	return &this
}

// GetKey returns the Key field value
func (o *PolicyRepoCreate) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *PolicyRepoCreate) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *PolicyRepoCreate) SetKey(v string) {
	o.Key = v
}

// GetUrl returns the Url field value
func (o *PolicyRepoCreate) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *PolicyRepoCreate) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *PolicyRepoCreate) SetUrl(v string) {
	o.Url = v
}

// GetMainBranchName returns the MainBranchName field value if set, zero value otherwise.
func (o *PolicyRepoCreate) GetMainBranchName() string {
	if o == nil || isNil(o.MainBranchName) {
		var ret string
		return ret
	}
	return *o.MainBranchName
}

// GetMainBranchNameOk returns a tuple with the MainBranchName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyRepoCreate) GetMainBranchNameOk() (*string, bool) {
	if o == nil || isNil(o.MainBranchName) {
		return nil, false
	}
	return o.MainBranchName, true
}

// HasMainBranchName returns a boolean if a field has been set.
func (o *PolicyRepoCreate) HasMainBranchName() bool {
	if o != nil && !isNil(o.MainBranchName) {
		return true
	}

	return false
}

// SetMainBranchName gets a reference to the given string and assigns it to the MainBranchName field.
func (o *PolicyRepoCreate) SetMainBranchName(v string) {
	o.MainBranchName = &v
}

// GetCredentials returns the Credentials field value
func (o *PolicyRepoCreate) GetCredentials() SSHAuthData {
	if o == nil {
		var ret SSHAuthData
		return ret
	}

	return o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value
// and a boolean to check if the value has been set.
func (o *PolicyRepoCreate) GetCredentialsOk() (*SSHAuthData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Credentials, true
}

// SetCredentials sets field value
func (o *PolicyRepoCreate) SetCredentials(v SSHAuthData) {
	o.Credentials = v
}

// GetActivateWhenValidated returns the ActivateWhenValidated field value if set, zero value otherwise.
func (o *PolicyRepoCreate) GetActivateWhenValidated() bool {
	if o == nil || isNil(o.ActivateWhenValidated) {
		var ret bool
		return ret
	}
	return *o.ActivateWhenValidated
}

// GetActivateWhenValidatedOk returns a tuple with the ActivateWhenValidated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyRepoCreate) GetActivateWhenValidatedOk() (*bool, bool) {
	if o == nil || isNil(o.ActivateWhenValidated) {
		return nil, false
	}
	return o.ActivateWhenValidated, true
}

// HasActivateWhenValidated returns a boolean if a field has been set.
func (o *PolicyRepoCreate) HasActivateWhenValidated() bool {
	if o != nil && !isNil(o.ActivateWhenValidated) {
		return true
	}

	return false
}

// SetActivateWhenValidated gets a reference to the given bool and assigns it to the ActivateWhenValidated field.
func (o *PolicyRepoCreate) SetActivateWhenValidated(v bool) {
	o.ActivateWhenValidated = &v
}

func (o PolicyRepoCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["key"] = o.Key
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if !isNil(o.MainBranchName) {
		toSerialize["main_branch_name"] = o.MainBranchName
	}
	if true {
		toSerialize["credentials"] = o.Credentials
	}
	if !isNil(o.ActivateWhenValidated) {
		toSerialize["activate_when_validated"] = o.ActivateWhenValidated
	}
	return json.Marshal(toSerialize)
}

type NullablePolicyRepoCreate struct {
	value *PolicyRepoCreate
	isSet bool
}

func (v NullablePolicyRepoCreate) Get() *PolicyRepoCreate {
	return v.value
}

func (v *NullablePolicyRepoCreate) Set(val *PolicyRepoCreate) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyRepoCreate) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyRepoCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyRepoCreate(val *PolicyRepoCreate) *NullablePolicyRepoCreate {
	return &NullablePolicyRepoCreate{value: val, isSet: true}
}

func (v NullablePolicyRepoCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyRepoCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
