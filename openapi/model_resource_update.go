/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResourceUpdate struct for ResourceUpdate
type ResourceUpdate struct {
	// The name of the resource
	Name *string `json:"name,omitempty"`
	// The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name) (Uniform Resource Name) of the resource
	Urn *string `json:"urn,omitempty"`
	// An optional longer description of what this resource respresents in your system
	Description *string `json:"description,omitempty"`
	//          A actions definition block, typically contained within a resource type definition block.         The actions represents the ways you can interact with a protected resource.
	Actions *map[string]ActionBlockEditable `json:"actions,omitempty"`
	// Attributes that each resource of this type defines, and can be used in your ABAC policies.
	Attributes *map[string]AttributeBlockEditable `json:"attributes,omitempty"`
}

// NewResourceUpdate instantiates a new ResourceUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceUpdate() *ResourceUpdate {
	this := ResourceUpdate{}
	return &this
}

// NewResourceUpdateWithDefaults instantiates a new ResourceUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceUpdateWithDefaults() *ResourceUpdate {
	this := ResourceUpdate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResourceUpdate) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceUpdate) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResourceUpdate) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResourceUpdate) SetName(v string) {
	o.Name = &v
}

// GetUrn returns the Urn field value if set, zero value otherwise.
func (o *ResourceUpdate) GetUrn() string {
	if o == nil || isNil(o.Urn) {
		var ret string
		return ret
	}
	return *o.Urn
}

// GetUrnOk returns a tuple with the Urn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceUpdate) GetUrnOk() (*string, bool) {
	if o == nil || isNil(o.Urn) {
		return nil, false
	}
	return o.Urn, true
}

// HasUrn returns a boolean if a field has been set.
func (o *ResourceUpdate) HasUrn() bool {
	if o != nil && !isNil(o.Urn) {
		return true
	}

	return false
}

// SetUrn gets a reference to the given string and assigns it to the Urn field.
func (o *ResourceUpdate) SetUrn(v string) {
	o.Urn = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ResourceUpdate) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ResourceUpdate) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ResourceUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *ResourceUpdate) GetActions() map[string]ActionBlockEditable {
	if o == nil || isNil(o.Actions) {
		var ret map[string]ActionBlockEditable
		return ret
	}
	return *o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceUpdate) GetActionsOk() (*map[string]ActionBlockEditable, bool) {
	if o == nil || isNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *ResourceUpdate) HasActions() bool {
	if o != nil && !isNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given map[string]ActionBlockEditable and assigns it to the Actions field.
func (o *ResourceUpdate) SetActions(v map[string]ActionBlockEditable) {
	o.Actions = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *ResourceUpdate) GetAttributes() map[string]AttributeBlockEditable {
	if o == nil || isNil(o.Attributes) {
		var ret map[string]AttributeBlockEditable
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceUpdate) GetAttributesOk() (*map[string]AttributeBlockEditable, bool) {
	if o == nil || isNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *ResourceUpdate) HasAttributes() bool {
	if o != nil && !isNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]AttributeBlockEditable and assigns it to the Attributes field.
func (o *ResourceUpdate) SetAttributes(v map[string]AttributeBlockEditable) {
	o.Attributes = &v
}

func (o ResourceUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Urn) {
		toSerialize["urn"] = o.Urn
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	if !isNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	return json.Marshal(toSerialize)
}

type NullableResourceUpdate struct {
	value *ResourceUpdate
	isSet bool
}

func (v NullableResourceUpdate) Get() *ResourceUpdate {
	return v.value
}

func (v *NullableResourceUpdate) Set(val *ResourceUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceUpdate(val *ResourceUpdate) *NullableResourceUpdate {
	return &NullableResourceUpdate{value: val, isSet: true}
}

func (v NullableResourceUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
