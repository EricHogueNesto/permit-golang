/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// InviteStatus An enumeration.
type InviteStatus string

// List of InviteStatus
const (
	PENDING  InviteStatus = "pending"
	ACCEPTED InviteStatus = "accepted"
	FAILED   InviteStatus = "failed"
	CANCELED InviteStatus = "canceled"
)

// All allowed values of InviteStatus enum
var AllowedInviteStatusEnumValues = []InviteStatus{
	"pending",
	"accepted",
	"failed",
	"canceled",
}

func (v *InviteStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InviteStatus(value)
	for _, existing := range AllowedInviteStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InviteStatus", value)
}

// NewInviteStatusFromValue returns a pointer to a valid InviteStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInviteStatusFromValue(v string) (*InviteStatus, error) {
	ev := InviteStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InviteStatus: valid values are %v", v, AllowedInviteStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InviteStatus) IsValid() bool {
	for _, existing := range AllowedInviteStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InviteStatus value
func (v InviteStatus) Ptr() *InviteStatus {
	return &v
}

type NullableInviteStatus struct {
	value *InviteStatus
	isSet bool
}

func (v NullableInviteStatus) Get() *InviteStatus {
	return v.value
}

func (v *NullableInviteStatus) Set(val *InviteStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableInviteStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableInviteStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInviteStatus(val *InviteStatus) *NullableInviteStatus {
	return &NullableInviteStatus{value: val, isSet: true}
}

func (v NullableInviteStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInviteStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
